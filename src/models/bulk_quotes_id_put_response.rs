/* 
 * Open API for FSP Interoperability (FSPIOP)
 *
 * Based on API Definition.docx updated on 2020-05-19 Version 1.1. Note - The API supports a maximum size of 65536 bytes (64 Kilobytes) in the HTTP header.
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// BulkQuotesIdPutResponse : PUT /bulkQuotes/{ID} object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct BulkQuotesIdPutResponse {
  /// Fees for each individual transaction, if any of them are charged per transaction.
  #[serde(rename = "individualQuoteResults")]
  individual_quote_results: Option<Vec<::models::IndividualQuoteResult>>,
  /// Date and time until when the quotation is valid and can be honored when used in the subsequent transaction request.
  #[serde(rename = "expiration")]
  expiration: String,
  /// Optional extension, specific to deployment.
  #[serde(rename = "extensionList")]
  extension_list: Option<::models::ExtensionList>
}

impl BulkQuotesIdPutResponse {
  /// PUT /bulkQuotes/{ID} object
  pub fn new(expiration: String) -> BulkQuotesIdPutResponse {
    BulkQuotesIdPutResponse {
      individual_quote_results: None,
      expiration: expiration,
      extension_list: None
    }
  }

  pub fn set_individual_quote_results(&mut self, individual_quote_results: Vec<::models::IndividualQuoteResult>) {
    self.individual_quote_results = Some(individual_quote_results);
  }

  pub fn with_individual_quote_results(mut self, individual_quote_results: Vec<::models::IndividualQuoteResult>) -> BulkQuotesIdPutResponse {
    self.individual_quote_results = Some(individual_quote_results);
    self
  }

  pub fn individual_quote_results(&self) -> Option<&Vec<::models::IndividualQuoteResult>> {
    self.individual_quote_results.as_ref()
  }

  pub fn reset_individual_quote_results(&mut self) {
    self.individual_quote_results = None;
  }

  pub fn set_expiration(&mut self, expiration: String) {
    self.expiration = expiration;
  }

  pub fn with_expiration(mut self, expiration: String) -> BulkQuotesIdPutResponse {
    self.expiration = expiration;
    self
  }

  pub fn expiration(&self) -> &String {
    &self.expiration
  }


  pub fn set_extension_list(&mut self, extension_list: ::models::ExtensionList) {
    self.extension_list = Some(extension_list);
  }

  pub fn with_extension_list(mut self, extension_list: ::models::ExtensionList) -> BulkQuotesIdPutResponse {
    self.extension_list = Some(extension_list);
    self
  }

  pub fn extension_list(&self) -> Option<&::models::ExtensionList> {
    self.extension_list.as_ref()
  }

  pub fn reset_extension_list(&mut self) {
    self.extension_list = None;
  }

}



