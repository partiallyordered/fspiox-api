/*
 * Open API for FSP Interoperability (FSPIOP)
 *
 * Based on API Definition.docx updated on 2020-05-19 Version 1.1. Note - The API supports a maximum size of 65536 bytes (64 Kilobytes) in the HTTP header.
 *
 * The version of the OpenAPI document: 1.1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// Refund : Data model for the complex type Refund.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Refund {
    /// Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to RFC 4122, that is restricted by a regular expression for interoperability reasons. An UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
    #[serde(rename = "originalTransactionId")]
    pub original_transaction_id: String,
    /// Reason for the refund.
    #[serde(rename = "refundReason", skip_serializing_if = "Option::is_none")]
    pub refund_reason: Option<String>,
}

impl Refund {
    /// Data model for the complex type Refund.
    pub fn new(original_transaction_id: String) -> Refund {
        Refund {
            original_transaction_id,
            refund_reason: None,
        }
    }
}


