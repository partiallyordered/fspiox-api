/* 
 * Open API for FSP Interoperability (FSPIOP)
 *
 * Based on API Definition.docx updated on 2020-05-19 Version 1.1. Note - The API supports a maximum size of 65536 bytes (64 Kilobytes) in the HTTP header.
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// IndividualTransfer : Data model for the complex type IndividualTransfer.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IndividualTransfer {
  /// Identifies messages related to the same /transfers sequence.
  #[serde(rename = "transferId")]
  transfer_id: ::models::CorrelationId,
  /// Transaction amount to be sent.
  #[serde(rename = "transferAmount")]
  transfer_amount: ::models::Money,
  /// ILP Packet containing the amount delivered to the Payee and the ILP Address of the Payee and any other end-to-end data.
  #[serde(rename = "ilpPacket")]
  ilp_packet: ::models::IlpPacket,
  /// Condition that must be fulfilled to commit the transfer.
  #[serde(rename = "condition")]
  condition: ::models::IlpCondition,
  /// Optional extension, specific to deployment.
  #[serde(rename = "extensionList")]
  extension_list: Option<::models::ExtensionList>
}

impl IndividualTransfer {
  /// Data model for the complex type IndividualTransfer.
  pub fn new(transfer_id: ::models::CorrelationId, transfer_amount: ::models::Money, ilp_packet: ::models::IlpPacket, condition: ::models::IlpCondition) -> IndividualTransfer {
    IndividualTransfer {
      transfer_id: transfer_id,
      transfer_amount: transfer_amount,
      ilp_packet: ilp_packet,
      condition: condition,
      extension_list: None
    }
  }

  pub fn set_transfer_id(&mut self, transfer_id: ::models::CorrelationId) {
    self.transfer_id = transfer_id;
  }

  pub fn with_transfer_id(mut self, transfer_id: ::models::CorrelationId) -> IndividualTransfer {
    self.transfer_id = transfer_id;
    self
  }

  pub fn transfer_id(&self) -> &::models::CorrelationId {
    &self.transfer_id
  }


  pub fn set_transfer_amount(&mut self, transfer_amount: ::models::Money) {
    self.transfer_amount = transfer_amount;
  }

  pub fn with_transfer_amount(mut self, transfer_amount: ::models::Money) -> IndividualTransfer {
    self.transfer_amount = transfer_amount;
    self
  }

  pub fn transfer_amount(&self) -> &::models::Money {
    &self.transfer_amount
  }


  pub fn set_ilp_packet(&mut self, ilp_packet: ::models::IlpPacket) {
    self.ilp_packet = ilp_packet;
  }

  pub fn with_ilp_packet(mut self, ilp_packet: ::models::IlpPacket) -> IndividualTransfer {
    self.ilp_packet = ilp_packet;
    self
  }

  pub fn ilp_packet(&self) -> &::models::IlpPacket {
    &self.ilp_packet
  }


  pub fn set_condition(&mut self, condition: ::models::IlpCondition) {
    self.condition = condition;
  }

  pub fn with_condition(mut self, condition: ::models::IlpCondition) -> IndividualTransfer {
    self.condition = condition;
    self
  }

  pub fn condition(&self) -> &::models::IlpCondition {
    &self.condition
  }


  pub fn set_extension_list(&mut self, extension_list: ::models::ExtensionList) {
    self.extension_list = Some(extension_list);
  }

  pub fn with_extension_list(mut self, extension_list: ::models::ExtensionList) -> IndividualTransfer {
    self.extension_list = Some(extension_list);
    self
  }

  pub fn extension_list(&self) -> Option<&::models::ExtensionList> {
    self.extension_list.as_ref()
  }

  pub fn reset_extension_list(&mut self) {
    self.extension_list = None;
  }

}



