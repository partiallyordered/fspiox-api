/*
 * Open API for FSP Interoperability (FSPIOP)
 *
 * Based on API Definition.docx updated on 2020-05-19 Version 1.1. Note - The API supports a maximum size of 65536 bytes (64 Kilobytes) in the HTTP header.
 *
 * The version of the OpenAPI document: 1.1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IndividualTransfer : Data model for the complex type IndividualTransfer.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IndividualTransfer {
    /// Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to RFC 4122, that is restricted by a regular expression for interoperability reasons. An UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
    #[serde(rename = "transferId")]
    pub transfer_id: String,
    #[serde(rename = "transferAmount")]
    pub transfer_amount: crate::models::Money,
    /// Information for recipient (transport layer information).
    #[serde(rename = "ilpPacket")]
    pub ilp_packet: String,
    /// Condition that must be attached to the transfer by the Payer.
    #[serde(rename = "condition")]
    pub condition: String,
    #[serde(rename = "extensionList", skip_serializing_if = "Option::is_none")]
    pub extension_list: Option<crate::models::ExtensionList>,
}

impl IndividualTransfer {
    /// Data model for the complex type IndividualTransfer.
    pub fn new(transfer_id: String, transfer_amount: crate::models::Money, ilp_packet: String, condition: String) -> IndividualTransfer {
        IndividualTransfer {
            transfer_id,
            transfer_amount,
            ilp_packet,
            condition,
            extension_list: None,
        }
    }
}


