/* 
 * Open API for FSP Interoperability (FSPIOP)
 *
 * Based on API Definition.docx updated on 2020-05-19 Version 1.1. Note - The API supports a maximum size of 65536 bytes (64 Kilobytes) in the HTTP header.
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// PartyIdInfo : Data model for the complex type PartyIdInfo. An ExtensionList element has been added to this reqeust in version v1.1

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PartyIdInfo {
  /// Type of the identifier.
  #[serde(rename = "partyIdType")]
  party_id_type: ::models::PartyIdType,
  /// An identifier for the Party.
  #[serde(rename = "partyIdentifier")]
  party_identifier: ::models::PartyIdentifier,
  /// A sub-identifier or sub-type for the Party.
  #[serde(rename = "partySubIdOrType")]
  party_sub_id_or_type: Option<::models::PartySubIdOrType>,
  /// FSP ID (if known)
  #[serde(rename = "fspId")]
  fsp_id: Option<::models::FspId>,
  /// Optional extension, specific to deployment.
  #[serde(rename = "extensionList")]
  extension_list: Option<::models::ExtensionList>
}

impl PartyIdInfo {
  /// Data model for the complex type PartyIdInfo. An ExtensionList element has been added to this reqeust in version v1.1
  pub fn new(party_id_type: ::models::PartyIdType, party_identifier: ::models::PartyIdentifier) -> PartyIdInfo {
    PartyIdInfo {
      party_id_type: party_id_type,
      party_identifier: party_identifier,
      party_sub_id_or_type: None,
      fsp_id: None,
      extension_list: None
    }
  }

  pub fn set_party_id_type(&mut self, party_id_type: ::models::PartyIdType) {
    self.party_id_type = party_id_type;
  }

  pub fn with_party_id_type(mut self, party_id_type: ::models::PartyIdType) -> PartyIdInfo {
    self.party_id_type = party_id_type;
    self
  }

  pub fn party_id_type(&self) -> &::models::PartyIdType {
    &self.party_id_type
  }


  pub fn set_party_identifier(&mut self, party_identifier: ::models::PartyIdentifier) {
    self.party_identifier = party_identifier;
  }

  pub fn with_party_identifier(mut self, party_identifier: ::models::PartyIdentifier) -> PartyIdInfo {
    self.party_identifier = party_identifier;
    self
  }

  pub fn party_identifier(&self) -> &::models::PartyIdentifier {
    &self.party_identifier
  }


  pub fn set_party_sub_id_or_type(&mut self, party_sub_id_or_type: ::models::PartySubIdOrType) {
    self.party_sub_id_or_type = Some(party_sub_id_or_type);
  }

  pub fn with_party_sub_id_or_type(mut self, party_sub_id_or_type: ::models::PartySubIdOrType) -> PartyIdInfo {
    self.party_sub_id_or_type = Some(party_sub_id_or_type);
    self
  }

  pub fn party_sub_id_or_type(&self) -> Option<&::models::PartySubIdOrType> {
    self.party_sub_id_or_type.as_ref()
  }

  pub fn reset_party_sub_id_or_type(&mut self) {
    self.party_sub_id_or_type = None;
  }

  pub fn set_fsp_id(&mut self, fsp_id: ::models::FspId) {
    self.fsp_id = Some(fsp_id);
  }

  pub fn with_fsp_id(mut self, fsp_id: ::models::FspId) -> PartyIdInfo {
    self.fsp_id = Some(fsp_id);
    self
  }

  pub fn fsp_id(&self) -> Option<&::models::FspId> {
    self.fsp_id.as_ref()
  }

  pub fn reset_fsp_id(&mut self) {
    self.fsp_id = None;
  }

  pub fn set_extension_list(&mut self, extension_list: ::models::ExtensionList) {
    self.extension_list = Some(extension_list);
  }

  pub fn with_extension_list(mut self, extension_list: ::models::ExtensionList) -> PartyIdInfo {
    self.extension_list = Some(extension_list);
    self
  }

  pub fn extension_list(&self) -> Option<&::models::ExtensionList> {
    self.extension_list.as_ref()
  }

  pub fn reset_extension_list(&mut self) {
    self.extension_list = None;
  }

}



