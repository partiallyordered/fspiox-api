/* 
 * Open API for FSP Interoperability (FSPIOP)
 *
 * Based on API Definition.docx updated on 2020-05-19 Version 1.1. Note - The API supports a maximum size of 65536 bytes (64 Kilobytes) in the HTTP header.
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// IndividualQuoteResult : Data model for the complex type IndividualQuoteResult.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IndividualQuoteResult {
  /// Identifies quote message.
  #[serde(rename = "quoteId")]
  quote_id: ::models::CorrelationId,
  /// Information about the Payee in the proposed financial transaction.
  #[serde(rename = "payee")]
  payee: Option<::models::Party>,
  /// The amount of Money that the Payer FSP should transfer to the Payee FSP.
  #[serde(rename = "transferAmount")]
  transfer_amount: Option<::models::Money>,
  /// Amount that the Payee should receive in the end-to-end transaction. Optional as the Payee FSP might not want to disclose any optional Payee fees.
  #[serde(rename = "payeeReceiveAmount")]
  payee_receive_amount: Option<::models::Money>,
  /// Payee FSPâ€™s part of the transaction fee.
  #[serde(rename = "payeeFspFee")]
  payee_fsp_fee: Option<::models::Money>,
  /// Transaction commission from the Payee FSP
  #[serde(rename = "payeeFspCommission")]
  payee_fsp_commission: Option<::models::Money>,
  /// The ILP Packet that must be attached to the transfer by the Payer.
  #[serde(rename = "ilpPacket")]
  ilp_packet: Option<::models::IlpPacket>,
  /// The condition that must be attached to the transfer by the Payer.
  #[serde(rename = "condition")]
  condition: Option<::models::IlpCondition>,
  /// Error code, category description. Note - payee, transferAmount, payeeReceiveAmount, payeeFspFee, payeeFspCommission, ilpPacket, and condition should not be set if errorInformation is set.
  #[serde(rename = "errorInformation")]
  error_information: Option<::models::ErrorInformation>,
  /// Optional extension, specific to deployment.
  #[serde(rename = "extensionList")]
  extension_list: Option<::models::ExtensionList>
}

impl IndividualQuoteResult {
  /// Data model for the complex type IndividualQuoteResult.
  pub fn new(quote_id: ::models::CorrelationId) -> IndividualQuoteResult {
    IndividualQuoteResult {
      quote_id: quote_id,
      payee: None,
      transfer_amount: None,
      payee_receive_amount: None,
      payee_fsp_fee: None,
      payee_fsp_commission: None,
      ilp_packet: None,
      condition: None,
      error_information: None,
      extension_list: None
    }
  }

  pub fn set_quote_id(&mut self, quote_id: ::models::CorrelationId) {
    self.quote_id = quote_id;
  }

  pub fn with_quote_id(mut self, quote_id: ::models::CorrelationId) -> IndividualQuoteResult {
    self.quote_id = quote_id;
    self
  }

  pub fn quote_id(&self) -> &::models::CorrelationId {
    &self.quote_id
  }


  pub fn set_payee(&mut self, payee: ::models::Party) {
    self.payee = Some(payee);
  }

  pub fn with_payee(mut self, payee: ::models::Party) -> IndividualQuoteResult {
    self.payee = Some(payee);
    self
  }

  pub fn payee(&self) -> Option<&::models::Party> {
    self.payee.as_ref()
  }

  pub fn reset_payee(&mut self) {
    self.payee = None;
  }

  pub fn set_transfer_amount(&mut self, transfer_amount: ::models::Money) {
    self.transfer_amount = Some(transfer_amount);
  }

  pub fn with_transfer_amount(mut self, transfer_amount: ::models::Money) -> IndividualQuoteResult {
    self.transfer_amount = Some(transfer_amount);
    self
  }

  pub fn transfer_amount(&self) -> Option<&::models::Money> {
    self.transfer_amount.as_ref()
  }

  pub fn reset_transfer_amount(&mut self) {
    self.transfer_amount = None;
  }

  pub fn set_payee_receive_amount(&mut self, payee_receive_amount: ::models::Money) {
    self.payee_receive_amount = Some(payee_receive_amount);
  }

  pub fn with_payee_receive_amount(mut self, payee_receive_amount: ::models::Money) -> IndividualQuoteResult {
    self.payee_receive_amount = Some(payee_receive_amount);
    self
  }

  pub fn payee_receive_amount(&self) -> Option<&::models::Money> {
    self.payee_receive_amount.as_ref()
  }

  pub fn reset_payee_receive_amount(&mut self) {
    self.payee_receive_amount = None;
  }

  pub fn set_payee_fsp_fee(&mut self, payee_fsp_fee: ::models::Money) {
    self.payee_fsp_fee = Some(payee_fsp_fee);
  }

  pub fn with_payee_fsp_fee(mut self, payee_fsp_fee: ::models::Money) -> IndividualQuoteResult {
    self.payee_fsp_fee = Some(payee_fsp_fee);
    self
  }

  pub fn payee_fsp_fee(&self) -> Option<&::models::Money> {
    self.payee_fsp_fee.as_ref()
  }

  pub fn reset_payee_fsp_fee(&mut self) {
    self.payee_fsp_fee = None;
  }

  pub fn set_payee_fsp_commission(&mut self, payee_fsp_commission: ::models::Money) {
    self.payee_fsp_commission = Some(payee_fsp_commission);
  }

  pub fn with_payee_fsp_commission(mut self, payee_fsp_commission: ::models::Money) -> IndividualQuoteResult {
    self.payee_fsp_commission = Some(payee_fsp_commission);
    self
  }

  pub fn payee_fsp_commission(&self) -> Option<&::models::Money> {
    self.payee_fsp_commission.as_ref()
  }

  pub fn reset_payee_fsp_commission(&mut self) {
    self.payee_fsp_commission = None;
  }

  pub fn set_ilp_packet(&mut self, ilp_packet: ::models::IlpPacket) {
    self.ilp_packet = Some(ilp_packet);
  }

  pub fn with_ilp_packet(mut self, ilp_packet: ::models::IlpPacket) -> IndividualQuoteResult {
    self.ilp_packet = Some(ilp_packet);
    self
  }

  pub fn ilp_packet(&self) -> Option<&::models::IlpPacket> {
    self.ilp_packet.as_ref()
  }

  pub fn reset_ilp_packet(&mut self) {
    self.ilp_packet = None;
  }

  pub fn set_condition(&mut self, condition: ::models::IlpCondition) {
    self.condition = Some(condition);
  }

  pub fn with_condition(mut self, condition: ::models::IlpCondition) -> IndividualQuoteResult {
    self.condition = Some(condition);
    self
  }

  pub fn condition(&self) -> Option<&::models::IlpCondition> {
    self.condition.as_ref()
  }

  pub fn reset_condition(&mut self) {
    self.condition = None;
  }

  pub fn set_error_information(&mut self, error_information: ::models::ErrorInformation) {
    self.error_information = Some(error_information);
  }

  pub fn with_error_information(mut self, error_information: ::models::ErrorInformation) -> IndividualQuoteResult {
    self.error_information = Some(error_information);
    self
  }

  pub fn error_information(&self) -> Option<&::models::ErrorInformation> {
    self.error_information.as_ref()
  }

  pub fn reset_error_information(&mut self) {
    self.error_information = None;
  }

  pub fn set_extension_list(&mut self, extension_list: ::models::ExtensionList) {
    self.extension_list = Some(extension_list);
  }

  pub fn with_extension_list(mut self, extension_list: ::models::ExtensionList) -> IndividualQuoteResult {
    self.extension_list = Some(extension_list);
    self
  }

  pub fn extension_list(&self) -> Option<&::models::ExtensionList> {
    self.extension_list.as_ref()
  }

  pub fn reset_extension_list(&mut self) {
    self.extension_list = None;
  }

}



