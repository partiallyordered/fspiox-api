/*
 * Open API for FSP Interoperability (FSPIOP)
 *
 * Based on API Definition.docx updated on 2020-05-19 Version 1.1. Note - The API supports a maximum size of 65536 bytes (64 Kilobytes) in the HTTP header.
 *
 * The version of the OpenAPI document: 1.1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IndividualQuoteResult : Data model for the complex type IndividualQuoteResult.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IndividualQuoteResult {
    /// Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to RFC 4122, that is restricted by a regular expression for interoperability reasons. An UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
    #[serde(rename = "quoteId")]
    pub quote_id: String,
    #[serde(rename = "payee", skip_serializing_if = "Option::is_none")]
    pub payee: Option<crate::models::Party>,
    #[serde(rename = "transferAmount", skip_serializing_if = "Option::is_none")]
    pub transfer_amount: Option<crate::models::Money>,
    #[serde(rename = "payeeReceiveAmount", skip_serializing_if = "Option::is_none")]
    pub payee_receive_amount: Option<crate::models::Money>,
    #[serde(rename = "payeeFspFee", skip_serializing_if = "Option::is_none")]
    pub payee_fsp_fee: Option<crate::models::Money>,
    #[serde(rename = "payeeFspCommission", skip_serializing_if = "Option::is_none")]
    pub payee_fsp_commission: Option<crate::models::Money>,
    /// Information for recipient (transport layer information).
    #[serde(rename = "ilpPacket", skip_serializing_if = "Option::is_none")]
    pub ilp_packet: Option<String>,
    /// Condition that must be attached to the transfer by the Payer.
    #[serde(rename = "condition", skip_serializing_if = "Option::is_none")]
    pub condition: Option<String>,
    #[serde(rename = "errorInformation", skip_serializing_if = "Option::is_none")]
    pub error_information: Option<crate::models::ErrorInformation>,
    #[serde(rename = "extensionList", skip_serializing_if = "Option::is_none")]
    pub extension_list: Option<crate::models::ExtensionList>,
}

impl IndividualQuoteResult {
    /// Data model for the complex type IndividualQuoteResult.
    pub fn new(quote_id: String) -> IndividualQuoteResult {
        IndividualQuoteResult {
            quote_id,
            payee: None,
            transfer_amount: None,
            payee_receive_amount: None,
            payee_fsp_fee: None,
            payee_fsp_commission: None,
            ilp_packet: None,
            condition: None,
            error_information: None,
            extension_list: None,
        }
    }
}


