/* 
 * Open API for FSP Interoperability (FSPIOP)
 *
 * Based on API Definition.docx updated on 2020-05-19 Version 1.1. Note - The API supports a maximum size of 65536 bytes (64 Kilobytes) in the HTTP header.
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// QuotesIdPutResponse : PUT /quotes/{ID} object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct QuotesIdPutResponse {
  /// The amount of Money that the Payer FSP should transfer to the Payee FSP.
  #[serde(rename = "transferAmount")]
  transfer_amount: ::models::Money,
  /// The amount of Money that the Payee should receive in the end-to-end transaction. Optional as the Payee FSP might not want to disclose any optional Payee fees.
  #[serde(rename = "payeeReceiveAmount")]
  payee_receive_amount: Option<::models::Money>,
  /// Payee FSPâ€™s part of the transaction fee.
  #[serde(rename = "payeeFspFee")]
  payee_fsp_fee: Option<::models::Money>,
  /// Transaction commission from the Payee FSP.
  #[serde(rename = "payeeFspCommission")]
  payee_fsp_commission: Option<::models::Money>,
  /// Date and time until when the quotation is valid and can be honored when used in the subsequent transaction.
  #[serde(rename = "expiration")]
  expiration: String,
  /// Longitude and Latitude of the Payee. Can be used to detect fraud.
  #[serde(rename = "geoCode")]
  geo_code: Option<::models::GeoCode>,
  /// The ILP Packet that must be attached to the transfer by the Payer.
  #[serde(rename = "ilpPacket")]
  ilp_packet: ::models::IlpPacket,
  /// The condition that must be attached to the transfer by the Payer.
  #[serde(rename = "condition")]
  condition: ::models::IlpCondition,
  /// Optional extension, specific to deployment.
  #[serde(rename = "extensionList")]
  extension_list: Option<::models::ExtensionList>
}

impl QuotesIdPutResponse {
  /// PUT /quotes/{ID} object
  pub fn new(transfer_amount: ::models::Money, expiration: String, ilp_packet: ::models::IlpPacket, condition: ::models::IlpCondition) -> QuotesIdPutResponse {
    QuotesIdPutResponse {
      transfer_amount: transfer_amount,
      payee_receive_amount: None,
      payee_fsp_fee: None,
      payee_fsp_commission: None,
      expiration: expiration,
      geo_code: None,
      ilp_packet: ilp_packet,
      condition: condition,
      extension_list: None
    }
  }

  pub fn set_transfer_amount(&mut self, transfer_amount: ::models::Money) {
    self.transfer_amount = transfer_amount;
  }

  pub fn with_transfer_amount(mut self, transfer_amount: ::models::Money) -> QuotesIdPutResponse {
    self.transfer_amount = transfer_amount;
    self
  }

  pub fn transfer_amount(&self) -> &::models::Money {
    &self.transfer_amount
  }


  pub fn set_payee_receive_amount(&mut self, payee_receive_amount: ::models::Money) {
    self.payee_receive_amount = Some(payee_receive_amount);
  }

  pub fn with_payee_receive_amount(mut self, payee_receive_amount: ::models::Money) -> QuotesIdPutResponse {
    self.payee_receive_amount = Some(payee_receive_amount);
    self
  }

  pub fn payee_receive_amount(&self) -> Option<&::models::Money> {
    self.payee_receive_amount.as_ref()
  }

  pub fn reset_payee_receive_amount(&mut self) {
    self.payee_receive_amount = None;
  }

  pub fn set_payee_fsp_fee(&mut self, payee_fsp_fee: ::models::Money) {
    self.payee_fsp_fee = Some(payee_fsp_fee);
  }

  pub fn with_payee_fsp_fee(mut self, payee_fsp_fee: ::models::Money) -> QuotesIdPutResponse {
    self.payee_fsp_fee = Some(payee_fsp_fee);
    self
  }

  pub fn payee_fsp_fee(&self) -> Option<&::models::Money> {
    self.payee_fsp_fee.as_ref()
  }

  pub fn reset_payee_fsp_fee(&mut self) {
    self.payee_fsp_fee = None;
  }

  pub fn set_payee_fsp_commission(&mut self, payee_fsp_commission: ::models::Money) {
    self.payee_fsp_commission = Some(payee_fsp_commission);
  }

  pub fn with_payee_fsp_commission(mut self, payee_fsp_commission: ::models::Money) -> QuotesIdPutResponse {
    self.payee_fsp_commission = Some(payee_fsp_commission);
    self
  }

  pub fn payee_fsp_commission(&self) -> Option<&::models::Money> {
    self.payee_fsp_commission.as_ref()
  }

  pub fn reset_payee_fsp_commission(&mut self) {
    self.payee_fsp_commission = None;
  }

  pub fn set_expiration(&mut self, expiration: String) {
    self.expiration = expiration;
  }

  pub fn with_expiration(mut self, expiration: String) -> QuotesIdPutResponse {
    self.expiration = expiration;
    self
  }

  pub fn expiration(&self) -> &String {
    &self.expiration
  }


  pub fn set_geo_code(&mut self, geo_code: ::models::GeoCode) {
    self.geo_code = Some(geo_code);
  }

  pub fn with_geo_code(mut self, geo_code: ::models::GeoCode) -> QuotesIdPutResponse {
    self.geo_code = Some(geo_code);
    self
  }

  pub fn geo_code(&self) -> Option<&::models::GeoCode> {
    self.geo_code.as_ref()
  }

  pub fn reset_geo_code(&mut self) {
    self.geo_code = None;
  }

  pub fn set_ilp_packet(&mut self, ilp_packet: ::models::IlpPacket) {
    self.ilp_packet = ilp_packet;
  }

  pub fn with_ilp_packet(mut self, ilp_packet: ::models::IlpPacket) -> QuotesIdPutResponse {
    self.ilp_packet = ilp_packet;
    self
  }

  pub fn ilp_packet(&self) -> &::models::IlpPacket {
    &self.ilp_packet
  }


  pub fn set_condition(&mut self, condition: ::models::IlpCondition) {
    self.condition = condition;
  }

  pub fn with_condition(mut self, condition: ::models::IlpCondition) -> QuotesIdPutResponse {
    self.condition = condition;
    self
  }

  pub fn condition(&self) -> &::models::IlpCondition {
    &self.condition
  }


  pub fn set_extension_list(&mut self, extension_list: ::models::ExtensionList) {
    self.extension_list = Some(extension_list);
  }

  pub fn with_extension_list(mut self, extension_list: ::models::ExtensionList) -> QuotesIdPutResponse {
    self.extension_list = Some(extension_list);
    self
  }

  pub fn extension_list(&self) -> Option<&::models::ExtensionList> {
    self.extension_list.as_ref()
  }

  pub fn reset_extension_list(&mut self) {
    self.extension_list = None;
  }

}



