/*
 * Open API for FSP Interoperability (FSPIOP)
 *
 * Based on API Definition.docx updated on 2020-05-19 Version 1.1. Note - The API supports a maximum size of 65536 bytes (64 Kilobytes) in the HTTP header.
 *
 * The version of the OpenAPI document: 1.1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// Party : Data model for the complex type Party.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Party {
    #[serde(rename = "partyIdInfo")]
    pub party_id_info: crate::models::PartyIdInfo,
    /// A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
    #[serde(rename = "merchantClassificationCode", skip_serializing_if = "Option::is_none")]
    pub merchant_classification_code: Option<String>,
    /// Name of the Party. Could be a real name or a nickname.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "personalInfo", skip_serializing_if = "Option::is_none")]
    pub personal_info: Option<crate::models::PartyPersonalInfo>,
}

impl Party {
    /// Data model for the complex type Party.
    pub fn new(party_id_info: crate::models::PartyIdInfo) -> Party {
        Party {
            party_id_info,
            merchant_classification_code: None,
            name: None,
            personal_info: None,
        }
    }
}


