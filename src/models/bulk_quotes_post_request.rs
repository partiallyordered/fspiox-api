/* 
 * Open API for FSP Interoperability (FSPIOP)
 *
 * Based on API Definition.docx updated on 2020-05-19 Version 1.1. Note - The API supports a maximum size of 65536 bytes (64 Kilobytes) in the HTTP header.
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// BulkQuotesPostRequest : POST /bulkQuotes object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct BulkQuotesPostRequest {
  /// Common ID between the FSPs for the bulk quote object, decided by the Payer FSP. The ID should be reused for resends of the same bulk quote. A new ID should be generated for each new bulk quote.
  #[serde(rename = "bulkQuoteId")]
  bulk_quote_id: ::models::CorrelationId,
  /// Information about the Payer in the proposed financial transaction.
  #[serde(rename = "payer")]
  payer: ::models::Party,
  /// Longitude and Latitude of the initiating Party. Can be used to detect fraud.
  #[serde(rename = "geoCode")]
  geo_code: Option<::models::GeoCode>,
  /// Expiration is optional to let the Payee FSP know when a quote no longer needs to be returned.
  #[serde(rename = "expiration")]
  expiration: Option<String>,
  /// List of quotes elements.
  #[serde(rename = "individualQuotes")]
  individual_quotes: Vec<::models::IndividualQuote>,
  /// Optional extension, specific to deployment.
  #[serde(rename = "extensionList")]
  extension_list: Option<::models::ExtensionList>
}

impl BulkQuotesPostRequest {
  /// POST /bulkQuotes object
  pub fn new(bulk_quote_id: ::models::CorrelationId, payer: ::models::Party, individual_quotes: Vec<::models::IndividualQuote>) -> BulkQuotesPostRequest {
    BulkQuotesPostRequest {
      bulk_quote_id: bulk_quote_id,
      payer: payer,
      geo_code: None,
      expiration: None,
      individual_quotes: individual_quotes,
      extension_list: None
    }
  }

  pub fn set_bulk_quote_id(&mut self, bulk_quote_id: ::models::CorrelationId) {
    self.bulk_quote_id = bulk_quote_id;
  }

  pub fn with_bulk_quote_id(mut self, bulk_quote_id: ::models::CorrelationId) -> BulkQuotesPostRequest {
    self.bulk_quote_id = bulk_quote_id;
    self
  }

  pub fn bulk_quote_id(&self) -> &::models::CorrelationId {
    &self.bulk_quote_id
  }


  pub fn set_payer(&mut self, payer: ::models::Party) {
    self.payer = payer;
  }

  pub fn with_payer(mut self, payer: ::models::Party) -> BulkQuotesPostRequest {
    self.payer = payer;
    self
  }

  pub fn payer(&self) -> &::models::Party {
    &self.payer
  }


  pub fn set_geo_code(&mut self, geo_code: ::models::GeoCode) {
    self.geo_code = Some(geo_code);
  }

  pub fn with_geo_code(mut self, geo_code: ::models::GeoCode) -> BulkQuotesPostRequest {
    self.geo_code = Some(geo_code);
    self
  }

  pub fn geo_code(&self) -> Option<&::models::GeoCode> {
    self.geo_code.as_ref()
  }

  pub fn reset_geo_code(&mut self) {
    self.geo_code = None;
  }

  pub fn set_expiration(&mut self, expiration: String) {
    self.expiration = Some(expiration);
  }

  pub fn with_expiration(mut self, expiration: String) -> BulkQuotesPostRequest {
    self.expiration = Some(expiration);
    self
  }

  pub fn expiration(&self) -> Option<&String> {
    self.expiration.as_ref()
  }

  pub fn reset_expiration(&mut self) {
    self.expiration = None;
  }

  pub fn set_individual_quotes(&mut self, individual_quotes: Vec<::models::IndividualQuote>) {
    self.individual_quotes = individual_quotes;
  }

  pub fn with_individual_quotes(mut self, individual_quotes: Vec<::models::IndividualQuote>) -> BulkQuotesPostRequest {
    self.individual_quotes = individual_quotes;
    self
  }

  pub fn individual_quotes(&self) -> &Vec<::models::IndividualQuote> {
    &self.individual_quotes
  }


  pub fn set_extension_list(&mut self, extension_list: ::models::ExtensionList) {
    self.extension_list = Some(extension_list);
  }

  pub fn with_extension_list(mut self, extension_list: ::models::ExtensionList) -> BulkQuotesPostRequest {
    self.extension_list = Some(extension_list);
    self
  }

  pub fn extension_list(&self) -> Option<&::models::ExtensionList> {
    self.extension_list.as_ref()
  }

  pub fn reset_extension_list(&mut self) {
    self.extension_list = None;
  }

}



