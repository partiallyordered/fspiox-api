/*
 * Open API for FSP Interoperability (FSPIOP)
 *
 * Based on API Definition.docx updated on 2020-05-19 Version 1.1. Note - The API supports a maximum size of 65536 bytes (64 Kilobytes) in the HTTP header.
 *
 * The version of the OpenAPI document: 1.1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// Transaction : Data model for the complex type Transaction. The Transaction type is used to carry end-to-end data between the Payer FSP and the Payee FSP in the ILP Packet. Both the transactionId and the quoteId in the data model are decided by the Payer FSP in the POST /quotes.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Transaction {
    /// Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to RFC 4122, that is restricted by a regular expression for interoperability reasons. An UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
    #[serde(rename = "transactionId")]
    pub transaction_id: String,
    /// Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to RFC 4122, that is restricted by a regular expression for interoperability reasons. An UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
    #[serde(rename = "quoteId")]
    pub quote_id: String,
    #[serde(rename = "payee")]
    pub payee: crate::models::Party,
    #[serde(rename = "payer")]
    pub payer: crate::models::Party,
    #[serde(rename = "amount")]
    pub amount: crate::models::Money,
    #[serde(rename = "transactionType")]
    pub transaction_type: crate::models::TransactionType,
    /// Memo assigned to transaction
    #[serde(rename = "note", skip_serializing_if = "Option::is_none")]
    pub note: Option<String>,
    #[serde(rename = "extensionList", skip_serializing_if = "Option::is_none")]
    pub extension_list: Option<crate::models::ExtensionList>,
}

impl Transaction {
    /// Data model for the complex type Transaction. The Transaction type is used to carry end-to-end data between the Payer FSP and the Payee FSP in the ILP Packet. Both the transactionId and the quoteId in the data model are decided by the Payer FSP in the POST /quotes.
    pub fn new(transaction_id: String, quote_id: String, payee: crate::models::Party, payer: crate::models::Party, amount: crate::models::Money, transaction_type: crate::models::TransactionType) -> Transaction {
        Transaction {
            transaction_id,
            quote_id,
            payee,
            payer,
            amount,
            transaction_type,
            note: None,
            extension_list: None,
        }
    }
}


