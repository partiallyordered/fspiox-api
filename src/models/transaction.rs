/* 
 * Open API for FSP Interoperability (FSPIOP)
 *
 * Based on API Definition.docx updated on 2020-05-19 Version 1.1. Note - The API supports a maximum size of 65536 bytes (64 Kilobytes) in the HTTP header.
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Transaction : Data model for the complex type Transaction. The Transaction type is used to carry end-to-end data between the Payer FSP and the Payee FSP in the ILP Packet. Both the transactionId and the quoteId in the data model are decided by the Payer FSP in the POST /quotes.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Transaction {
  /// ID of the transaction, the ID is decided by the Payer FSP during the creation of the quote.
  #[serde(rename = "transactionId")]
  transaction_id: ::models::CorrelationId,
  /// ID of the quote, the ID is decided by the Payer FSP during the creation of the quote.
  #[serde(rename = "quoteId")]
  quote_id: ::models::CorrelationId,
  /// Information about the Payee in the proposed financial transaction.
  #[serde(rename = "payee")]
  payee: ::models::Party,
  /// Information about the Payer in the proposed financial transaction.
  #[serde(rename = "payer")]
  payer: ::models::Party,
  /// Transaction amount to be sent.
  #[serde(rename = "amount")]
  amount: ::models::Money,
  /// Type of the transaction.
  #[serde(rename = "transactionType")]
  transaction_type: ::models::TransactionType,
  /// Memo associated to the transaction, intended to the Payee.
  #[serde(rename = "note")]
  note: Option<::models::Note>,
  /// Optional extension, specific to deployment.
  #[serde(rename = "extensionList")]
  extension_list: Option<::models::ExtensionList>
}

impl Transaction {
  /// Data model for the complex type Transaction. The Transaction type is used to carry end-to-end data between the Payer FSP and the Payee FSP in the ILP Packet. Both the transactionId and the quoteId in the data model are decided by the Payer FSP in the POST /quotes.
  pub fn new(transaction_id: ::models::CorrelationId, quote_id: ::models::CorrelationId, payee: ::models::Party, payer: ::models::Party, amount: ::models::Money, transaction_type: ::models::TransactionType) -> Transaction {
    Transaction {
      transaction_id: transaction_id,
      quote_id: quote_id,
      payee: payee,
      payer: payer,
      amount: amount,
      transaction_type: transaction_type,
      note: None,
      extension_list: None
    }
  }

  pub fn set_transaction_id(&mut self, transaction_id: ::models::CorrelationId) {
    self.transaction_id = transaction_id;
  }

  pub fn with_transaction_id(mut self, transaction_id: ::models::CorrelationId) -> Transaction {
    self.transaction_id = transaction_id;
    self
  }

  pub fn transaction_id(&self) -> &::models::CorrelationId {
    &self.transaction_id
  }


  pub fn set_quote_id(&mut self, quote_id: ::models::CorrelationId) {
    self.quote_id = quote_id;
  }

  pub fn with_quote_id(mut self, quote_id: ::models::CorrelationId) -> Transaction {
    self.quote_id = quote_id;
    self
  }

  pub fn quote_id(&self) -> &::models::CorrelationId {
    &self.quote_id
  }


  pub fn set_payee(&mut self, payee: ::models::Party) {
    self.payee = payee;
  }

  pub fn with_payee(mut self, payee: ::models::Party) -> Transaction {
    self.payee = payee;
    self
  }

  pub fn payee(&self) -> &::models::Party {
    &self.payee
  }


  pub fn set_payer(&mut self, payer: ::models::Party) {
    self.payer = payer;
  }

  pub fn with_payer(mut self, payer: ::models::Party) -> Transaction {
    self.payer = payer;
    self
  }

  pub fn payer(&self) -> &::models::Party {
    &self.payer
  }


  pub fn set_amount(&mut self, amount: ::models::Money) {
    self.amount = amount;
  }

  pub fn with_amount(mut self, amount: ::models::Money) -> Transaction {
    self.amount = amount;
    self
  }

  pub fn amount(&self) -> &::models::Money {
    &self.amount
  }


  pub fn set_transaction_type(&mut self, transaction_type: ::models::TransactionType) {
    self.transaction_type = transaction_type;
  }

  pub fn with_transaction_type(mut self, transaction_type: ::models::TransactionType) -> Transaction {
    self.transaction_type = transaction_type;
    self
  }

  pub fn transaction_type(&self) -> &::models::TransactionType {
    &self.transaction_type
  }


  pub fn set_note(&mut self, note: ::models::Note) {
    self.note = Some(note);
  }

  pub fn with_note(mut self, note: ::models::Note) -> Transaction {
    self.note = Some(note);
    self
  }

  pub fn note(&self) -> Option<&::models::Note> {
    self.note.as_ref()
  }

  pub fn reset_note(&mut self) {
    self.note = None;
  }

  pub fn set_extension_list(&mut self, extension_list: ::models::ExtensionList) {
    self.extension_list = Some(extension_list);
  }

  pub fn with_extension_list(mut self, extension_list: ::models::ExtensionList) -> Transaction {
    self.extension_list = Some(extension_list);
    self
  }

  pub fn extension_list(&self) -> Option<&::models::ExtensionList> {
    self.extension_list.as_ref()
  }

  pub fn reset_extension_list(&mut self) {
    self.extension_list = None;
  }

}



