/* 
 * Open API for FSP Interoperability (FSPIOP)
 *
 * Based on API Definition.docx updated on 2020-05-19 Version 1.1. Note - The API supports a maximum size of 65536 bytes (64 Kilobytes) in the HTTP header.
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// TransfersPostRequest : POST /transfers Request object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct TransfersPostRequest {
  /// The common ID between the FSPs and the optional Switch for the transfer object, decided by the Payer FSP. The ID should be reused for resends of the same transfer. A new ID should be generated for each new transfer.
  #[serde(rename = "transferId")]
  transfer_id: ::models::CorrelationId,
  /// Payee FSP in the proposed financial transaction.
  #[serde(rename = "payeeFsp")]
  payee_fsp: ::models::FspId,
  /// Payer FSP in the proposed financial transaction.
  #[serde(rename = "payerFsp")]
  payer_fsp: ::models::FspId,
  /// The transfer amount to be sent.
  #[serde(rename = "amount")]
  amount: ::models::Money,
  /// The ILP Packet containing the amount delivered to the Payee and the ILP Address of the Payee and any other end-to-end data.
  #[serde(rename = "ilpPacket")]
  ilp_packet: ::models::IlpPacket,
  /// The condition that must be fulfilled to commit the transfer.
  #[serde(rename = "condition")]
  condition: ::models::IlpCondition,
  /// Expiration can be set to get a quick failure expiration of the transfer. The transfer should be rolled back if no fulfilment is delivered before this time.
  #[serde(rename = "expiration")]
  expiration: String,
  /// Optional extension, specific to deployment.
  #[serde(rename = "extensionList")]
  extension_list: Option<::models::ExtensionList>
}

impl TransfersPostRequest {
  /// POST /transfers Request object
  pub fn new(transfer_id: ::models::CorrelationId, payee_fsp: ::models::FspId, payer_fsp: ::models::FspId, amount: ::models::Money, ilp_packet: ::models::IlpPacket, condition: ::models::IlpCondition, expiration: String) -> TransfersPostRequest {
    TransfersPostRequest {
      transfer_id: transfer_id,
      payee_fsp: payee_fsp,
      payer_fsp: payer_fsp,
      amount: amount,
      ilp_packet: ilp_packet,
      condition: condition,
      expiration: expiration,
      extension_list: None
    }
  }

  pub fn set_transfer_id(&mut self, transfer_id: ::models::CorrelationId) {
    self.transfer_id = transfer_id;
  }

  pub fn with_transfer_id(mut self, transfer_id: ::models::CorrelationId) -> TransfersPostRequest {
    self.transfer_id = transfer_id;
    self
  }

  pub fn transfer_id(&self) -> &::models::CorrelationId {
    &self.transfer_id
  }


  pub fn set_payee_fsp(&mut self, payee_fsp: ::models::FspId) {
    self.payee_fsp = payee_fsp;
  }

  pub fn with_payee_fsp(mut self, payee_fsp: ::models::FspId) -> TransfersPostRequest {
    self.payee_fsp = payee_fsp;
    self
  }

  pub fn payee_fsp(&self) -> &::models::FspId {
    &self.payee_fsp
  }


  pub fn set_payer_fsp(&mut self, payer_fsp: ::models::FspId) {
    self.payer_fsp = payer_fsp;
  }

  pub fn with_payer_fsp(mut self, payer_fsp: ::models::FspId) -> TransfersPostRequest {
    self.payer_fsp = payer_fsp;
    self
  }

  pub fn payer_fsp(&self) -> &::models::FspId {
    &self.payer_fsp
  }


  pub fn set_amount(&mut self, amount: ::models::Money) {
    self.amount = amount;
  }

  pub fn with_amount(mut self, amount: ::models::Money) -> TransfersPostRequest {
    self.amount = amount;
    self
  }

  pub fn amount(&self) -> &::models::Money {
    &self.amount
  }


  pub fn set_ilp_packet(&mut self, ilp_packet: ::models::IlpPacket) {
    self.ilp_packet = ilp_packet;
  }

  pub fn with_ilp_packet(mut self, ilp_packet: ::models::IlpPacket) -> TransfersPostRequest {
    self.ilp_packet = ilp_packet;
    self
  }

  pub fn ilp_packet(&self) -> &::models::IlpPacket {
    &self.ilp_packet
  }


  pub fn set_condition(&mut self, condition: ::models::IlpCondition) {
    self.condition = condition;
  }

  pub fn with_condition(mut self, condition: ::models::IlpCondition) -> TransfersPostRequest {
    self.condition = condition;
    self
  }

  pub fn condition(&self) -> &::models::IlpCondition {
    &self.condition
  }


  pub fn set_expiration(&mut self, expiration: String) {
    self.expiration = expiration;
  }

  pub fn with_expiration(mut self, expiration: String) -> TransfersPostRequest {
    self.expiration = expiration;
    self
  }

  pub fn expiration(&self) -> &String {
    &self.expiration
  }


  pub fn set_extension_list(&mut self, extension_list: ::models::ExtensionList) {
    self.extension_list = Some(extension_list);
  }

  pub fn with_extension_list(mut self, extension_list: ::models::ExtensionList) -> TransfersPostRequest {
    self.extension_list = Some(extension_list);
    self
  }

  pub fn extension_list(&self) -> Option<&::models::ExtensionList> {
    self.extension_list.as_ref()
  }

  pub fn reset_extension_list(&mut self) {
    self.extension_list = None;
  }

}



