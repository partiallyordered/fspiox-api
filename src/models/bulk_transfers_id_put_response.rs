/* 
 * Open API for FSP Interoperability (FSPIOP)
 *
 * Based on API Definition.docx updated on 2020-05-19 Version 1.1. Note - The API supports a maximum size of 65536 bytes (64 Kilobytes) in the HTTP header.
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// BulkTransfersIdPutResponse : PUT /bulkTransfers/{ID} object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct BulkTransfersIdPutResponse {
  /// Time and date when the bulk transaction was completed.
  #[serde(rename = "completedTimestamp")]
  completed_timestamp: Option<String>,
  /// List of IndividualTransferResult elements.
  #[serde(rename = "individualTransferResults")]
  individual_transfer_results: Option<Vec<::models::IndividualTransferResult>>,
  /// The state of the bulk transfer.
  #[serde(rename = "bulkTransferState")]
  bulk_transfer_state: ::models::BulkTransferState,
  /// Optional extension, specific to deployment.
  #[serde(rename = "extensionList")]
  extension_list: Option<::models::ExtensionList>
}

impl BulkTransfersIdPutResponse {
  /// PUT /bulkTransfers/{ID} object
  pub fn new(bulk_transfer_state: ::models::BulkTransferState) -> BulkTransfersIdPutResponse {
    BulkTransfersIdPutResponse {
      completed_timestamp: None,
      individual_transfer_results: None,
      bulk_transfer_state: bulk_transfer_state,
      extension_list: None
    }
  }

  pub fn set_completed_timestamp(&mut self, completed_timestamp: String) {
    self.completed_timestamp = Some(completed_timestamp);
  }

  pub fn with_completed_timestamp(mut self, completed_timestamp: String) -> BulkTransfersIdPutResponse {
    self.completed_timestamp = Some(completed_timestamp);
    self
  }

  pub fn completed_timestamp(&self) -> Option<&String> {
    self.completed_timestamp.as_ref()
  }

  pub fn reset_completed_timestamp(&mut self) {
    self.completed_timestamp = None;
  }

  pub fn set_individual_transfer_results(&mut self, individual_transfer_results: Vec<::models::IndividualTransferResult>) {
    self.individual_transfer_results = Some(individual_transfer_results);
  }

  pub fn with_individual_transfer_results(mut self, individual_transfer_results: Vec<::models::IndividualTransferResult>) -> BulkTransfersIdPutResponse {
    self.individual_transfer_results = Some(individual_transfer_results);
    self
  }

  pub fn individual_transfer_results(&self) -> Option<&Vec<::models::IndividualTransferResult>> {
    self.individual_transfer_results.as_ref()
  }

  pub fn reset_individual_transfer_results(&mut self) {
    self.individual_transfer_results = None;
  }

  pub fn set_bulk_transfer_state(&mut self, bulk_transfer_state: ::models::BulkTransferState) {
    self.bulk_transfer_state = bulk_transfer_state;
  }

  pub fn with_bulk_transfer_state(mut self, bulk_transfer_state: ::models::BulkTransferState) -> BulkTransfersIdPutResponse {
    self.bulk_transfer_state = bulk_transfer_state;
    self
  }

  pub fn bulk_transfer_state(&self) -> &::models::BulkTransferState {
    &self.bulk_transfer_state
  }


  pub fn set_extension_list(&mut self, extension_list: ::models::ExtensionList) {
    self.extension_list = Some(extension_list);
  }

  pub fn with_extension_list(mut self, extension_list: ::models::ExtensionList) -> BulkTransfersIdPutResponse {
    self.extension_list = Some(extension_list);
    self
  }

  pub fn extension_list(&self) -> Option<&::models::ExtensionList> {
    self.extension_list.as_ref()
  }

  pub fn reset_extension_list(&mut self) {
    self.extension_list = None;
  }

}



