/* 
 * Open API for FSP Interoperability (FSPIOP)
 *
 * Based on API Definition.docx updated on 2020-05-19 Version 1.1. Note - The API supports a maximum size of 65536 bytes (64 Kilobytes) in the HTTP header.
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// TransactionRequestsPostRequest : POST /transactionRequests object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct TransactionRequestsPostRequest {
  /// Common ID between the FSPs for the transaction request object, decided by the Payee FSP. The ID should be reused for resends of the same transaction request. A new ID should be generated for each new transaction request.
  #[serde(rename = "transactionRequestId")]
  transaction_request_id: ::models::CorrelationId,
  /// Information about the Payee in the proposed financial transaction.
  #[serde(rename = "payee")]
  payee: ::models::Party,
  /// Information about the Payer type, id, sub-type/id, FSP Id in the proposed financial transaction.
  #[serde(rename = "payer")]
  payer: ::models::PartyIdInfo,
  /// Requested amount to be transferred from the Payer to Payee.
  #[serde(rename = "amount")]
  amount: ::models::Money,
  /// Type of transaction.
  #[serde(rename = "transactionType")]
  transaction_type: ::models::TransactionType,
  /// Reason for the transaction request, intended to the Payer.
  #[serde(rename = "note")]
  note: Option<::models::Note>,
  /// Longitude and Latitude of the initiating Party. Can be used to detect fraud.
  #[serde(rename = "geoCode")]
  geo_code: Option<::models::GeoCode>,
  /// OTP or QR Code, otherwise empty.
  #[serde(rename = "authenticationType")]
  authentication_type: Option<::models::AuthenticationType>,
  /// Can be set to get a quick failure in case the peer FSP takes too long to respond. Also, it may be beneficial for Consumer, Agent, Merchant to know that their request has a time limit.
  #[serde(rename = "expiration")]
  expiration: Option<String>,
  /// Optional extension, specific to deployment.
  #[serde(rename = "extensionList")]
  extension_list: Option<::models::ExtensionList>
}

impl TransactionRequestsPostRequest {
  /// POST /transactionRequests object
  pub fn new(transaction_request_id: ::models::CorrelationId, payee: ::models::Party, payer: ::models::PartyIdInfo, amount: ::models::Money, transaction_type: ::models::TransactionType) -> TransactionRequestsPostRequest {
    TransactionRequestsPostRequest {
      transaction_request_id: transaction_request_id,
      payee: payee,
      payer: payer,
      amount: amount,
      transaction_type: transaction_type,
      note: None,
      geo_code: None,
      authentication_type: None,
      expiration: None,
      extension_list: None
    }
  }

  pub fn set_transaction_request_id(&mut self, transaction_request_id: ::models::CorrelationId) {
    self.transaction_request_id = transaction_request_id;
  }

  pub fn with_transaction_request_id(mut self, transaction_request_id: ::models::CorrelationId) -> TransactionRequestsPostRequest {
    self.transaction_request_id = transaction_request_id;
    self
  }

  pub fn transaction_request_id(&self) -> &::models::CorrelationId {
    &self.transaction_request_id
  }


  pub fn set_payee(&mut self, payee: ::models::Party) {
    self.payee = payee;
  }

  pub fn with_payee(mut self, payee: ::models::Party) -> TransactionRequestsPostRequest {
    self.payee = payee;
    self
  }

  pub fn payee(&self) -> &::models::Party {
    &self.payee
  }


  pub fn set_payer(&mut self, payer: ::models::PartyIdInfo) {
    self.payer = payer;
  }

  pub fn with_payer(mut self, payer: ::models::PartyIdInfo) -> TransactionRequestsPostRequest {
    self.payer = payer;
    self
  }

  pub fn payer(&self) -> &::models::PartyIdInfo {
    &self.payer
  }


  pub fn set_amount(&mut self, amount: ::models::Money) {
    self.amount = amount;
  }

  pub fn with_amount(mut self, amount: ::models::Money) -> TransactionRequestsPostRequest {
    self.amount = amount;
    self
  }

  pub fn amount(&self) -> &::models::Money {
    &self.amount
  }


  pub fn set_transaction_type(&mut self, transaction_type: ::models::TransactionType) {
    self.transaction_type = transaction_type;
  }

  pub fn with_transaction_type(mut self, transaction_type: ::models::TransactionType) -> TransactionRequestsPostRequest {
    self.transaction_type = transaction_type;
    self
  }

  pub fn transaction_type(&self) -> &::models::TransactionType {
    &self.transaction_type
  }


  pub fn set_note(&mut self, note: ::models::Note) {
    self.note = Some(note);
  }

  pub fn with_note(mut self, note: ::models::Note) -> TransactionRequestsPostRequest {
    self.note = Some(note);
    self
  }

  pub fn note(&self) -> Option<&::models::Note> {
    self.note.as_ref()
  }

  pub fn reset_note(&mut self) {
    self.note = None;
  }

  pub fn set_geo_code(&mut self, geo_code: ::models::GeoCode) {
    self.geo_code = Some(geo_code);
  }

  pub fn with_geo_code(mut self, geo_code: ::models::GeoCode) -> TransactionRequestsPostRequest {
    self.geo_code = Some(geo_code);
    self
  }

  pub fn geo_code(&self) -> Option<&::models::GeoCode> {
    self.geo_code.as_ref()
  }

  pub fn reset_geo_code(&mut self) {
    self.geo_code = None;
  }

  pub fn set_authentication_type(&mut self, authentication_type: ::models::AuthenticationType) {
    self.authentication_type = Some(authentication_type);
  }

  pub fn with_authentication_type(mut self, authentication_type: ::models::AuthenticationType) -> TransactionRequestsPostRequest {
    self.authentication_type = Some(authentication_type);
    self
  }

  pub fn authentication_type(&self) -> Option<&::models::AuthenticationType> {
    self.authentication_type.as_ref()
  }

  pub fn reset_authentication_type(&mut self) {
    self.authentication_type = None;
  }

  pub fn set_expiration(&mut self, expiration: String) {
    self.expiration = Some(expiration);
  }

  pub fn with_expiration(mut self, expiration: String) -> TransactionRequestsPostRequest {
    self.expiration = Some(expiration);
    self
  }

  pub fn expiration(&self) -> Option<&String> {
    self.expiration.as_ref()
  }

  pub fn reset_expiration(&mut self) {
    self.expiration = None;
  }

  pub fn set_extension_list(&mut self, extension_list: ::models::ExtensionList) {
    self.extension_list = Some(extension_list);
  }

  pub fn with_extension_list(mut self, extension_list: ::models::ExtensionList) -> TransactionRequestsPostRequest {
    self.extension_list = Some(extension_list);
    self
  }

  pub fn extension_list(&self) -> Option<&::models::ExtensionList> {
    self.extension_list.as_ref()
  }

  pub fn reset_extension_list(&mut self) {
    self.extension_list = None;
  }

}



