/* 
 * Open API for FSP Interoperability (FSPIOP)
 *
 * Based on API Definition.docx updated on 2020-05-19 Version 1.1. Note - The API supports a maximum size of 65536 bytes (64 Kilobytes) in the HTTP header.
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// BulkTransfersPostRequest : POST /bulkTransfers object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct BulkTransfersPostRequest {
  /// Common ID between the FSPs and the optional Switch for the bulk transfer object, decided by the Payer FSP. The ID should be reused for resends of the same bulk transfer. A new ID should be generated for each new bulk transfer.
  #[serde(rename = "bulkTransferId")]
  bulk_transfer_id: ::models::CorrelationId,
  /// ID of the related bulk quote.
  #[serde(rename = "bulkQuoteId")]
  bulk_quote_id: ::models::CorrelationId,
  /// Payer FSP identifier.
  #[serde(rename = "payerFsp")]
  payer_fsp: ::models::FspId,
  /// Payee FSP identifier.
  #[serde(rename = "payeeFsp")]
  payee_fsp: ::models::FspId,
  /// List of IndividualTransfer elements.
  #[serde(rename = "individualTransfers")]
  individual_transfers: Vec<::models::IndividualTransfer>,
  /// Expiration time of the transfers.
  #[serde(rename = "expiration")]
  expiration: String,
  /// Optional extension, specific to deployment.
  #[serde(rename = "extensionList")]
  extension_list: Option<::models::ExtensionList>
}

impl BulkTransfersPostRequest {
  /// POST /bulkTransfers object
  pub fn new(bulk_transfer_id: ::models::CorrelationId, bulk_quote_id: ::models::CorrelationId, payer_fsp: ::models::FspId, payee_fsp: ::models::FspId, individual_transfers: Vec<::models::IndividualTransfer>, expiration: String) -> BulkTransfersPostRequest {
    BulkTransfersPostRequest {
      bulk_transfer_id: bulk_transfer_id,
      bulk_quote_id: bulk_quote_id,
      payer_fsp: payer_fsp,
      payee_fsp: payee_fsp,
      individual_transfers: individual_transfers,
      expiration: expiration,
      extension_list: None
    }
  }

  pub fn set_bulk_transfer_id(&mut self, bulk_transfer_id: ::models::CorrelationId) {
    self.bulk_transfer_id = bulk_transfer_id;
  }

  pub fn with_bulk_transfer_id(mut self, bulk_transfer_id: ::models::CorrelationId) -> BulkTransfersPostRequest {
    self.bulk_transfer_id = bulk_transfer_id;
    self
  }

  pub fn bulk_transfer_id(&self) -> &::models::CorrelationId {
    &self.bulk_transfer_id
  }


  pub fn set_bulk_quote_id(&mut self, bulk_quote_id: ::models::CorrelationId) {
    self.bulk_quote_id = bulk_quote_id;
  }

  pub fn with_bulk_quote_id(mut self, bulk_quote_id: ::models::CorrelationId) -> BulkTransfersPostRequest {
    self.bulk_quote_id = bulk_quote_id;
    self
  }

  pub fn bulk_quote_id(&self) -> &::models::CorrelationId {
    &self.bulk_quote_id
  }


  pub fn set_payer_fsp(&mut self, payer_fsp: ::models::FspId) {
    self.payer_fsp = payer_fsp;
  }

  pub fn with_payer_fsp(mut self, payer_fsp: ::models::FspId) -> BulkTransfersPostRequest {
    self.payer_fsp = payer_fsp;
    self
  }

  pub fn payer_fsp(&self) -> &::models::FspId {
    &self.payer_fsp
  }


  pub fn set_payee_fsp(&mut self, payee_fsp: ::models::FspId) {
    self.payee_fsp = payee_fsp;
  }

  pub fn with_payee_fsp(mut self, payee_fsp: ::models::FspId) -> BulkTransfersPostRequest {
    self.payee_fsp = payee_fsp;
    self
  }

  pub fn payee_fsp(&self) -> &::models::FspId {
    &self.payee_fsp
  }


  pub fn set_individual_transfers(&mut self, individual_transfers: Vec<::models::IndividualTransfer>) {
    self.individual_transfers = individual_transfers;
  }

  pub fn with_individual_transfers(mut self, individual_transfers: Vec<::models::IndividualTransfer>) -> BulkTransfersPostRequest {
    self.individual_transfers = individual_transfers;
    self
  }

  pub fn individual_transfers(&self) -> &Vec<::models::IndividualTransfer> {
    &self.individual_transfers
  }


  pub fn set_expiration(&mut self, expiration: String) {
    self.expiration = expiration;
  }

  pub fn with_expiration(mut self, expiration: String) -> BulkTransfersPostRequest {
    self.expiration = expiration;
    self
  }

  pub fn expiration(&self) -> &String {
    &self.expiration
  }


  pub fn set_extension_list(&mut self, extension_list: ::models::ExtensionList) {
    self.extension_list = Some(extension_list);
  }

  pub fn with_extension_list(mut self, extension_list: ::models::ExtensionList) -> BulkTransfersPostRequest {
    self.extension_list = Some(extension_list);
    self
  }

  pub fn extension_list(&self) -> Option<&::models::ExtensionList> {
    self.extension_list.as_ref()
  }

  pub fn reset_extension_list(&mut self) {
    self.extension_list = None;
  }

}



