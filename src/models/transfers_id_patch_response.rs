/* 
 * Open API for FSP Interoperability (FSPIOP)
 *
 * Based on API Definition.docx updated on 2020-05-19 Version 1.1. Note - The API supports a maximum size of 65536 bytes (64 Kilobytes) in the HTTP header.
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// TransfersIdPatchResponse : PATCH /transfers/{ID} object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct TransfersIdPatchResponse {
  /// Time and date when the transaction was completed.
  #[serde(rename = "completedTimestamp")]
  completed_timestamp: String,
  /// State of the transfer.
  #[serde(rename = "transferState")]
  transfer_state: ::models::TransferState,
  /// Optional extension, specific to deployment.
  #[serde(rename = "extensionList")]
  extension_list: Option<::models::ExtensionList>
}

impl TransfersIdPatchResponse {
  /// PATCH /transfers/{ID} object
  pub fn new(completed_timestamp: String, transfer_state: ::models::TransferState) -> TransfersIdPatchResponse {
    TransfersIdPatchResponse {
      completed_timestamp: completed_timestamp,
      transfer_state: transfer_state,
      extension_list: None
    }
  }

  pub fn set_completed_timestamp(&mut self, completed_timestamp: String) {
    self.completed_timestamp = completed_timestamp;
  }

  pub fn with_completed_timestamp(mut self, completed_timestamp: String) -> TransfersIdPatchResponse {
    self.completed_timestamp = completed_timestamp;
    self
  }

  pub fn completed_timestamp(&self) -> &String {
    &self.completed_timestamp
  }


  pub fn set_transfer_state(&mut self, transfer_state: ::models::TransferState) {
    self.transfer_state = transfer_state;
  }

  pub fn with_transfer_state(mut self, transfer_state: ::models::TransferState) -> TransfersIdPatchResponse {
    self.transfer_state = transfer_state;
    self
  }

  pub fn transfer_state(&self) -> &::models::TransferState {
    &self.transfer_state
  }


  pub fn set_extension_list(&mut self, extension_list: ::models::ExtensionList) {
    self.extension_list = Some(extension_list);
  }

  pub fn with_extension_list(mut self, extension_list: ::models::ExtensionList) -> TransfersIdPatchResponse {
    self.extension_list = Some(extension_list);
    self
  }

  pub fn extension_list(&self) -> Option<&::models::ExtensionList> {
    self.extension_list.as_ref()
  }

  pub fn reset_extension_list(&mut self) {
    self.extension_list = None;
  }

}



