/* 
 * Open API for FSP Interoperability (FSPIOP)
 *
 * Based on API Definition.docx updated on 2020-05-19 Version 1.1. Note - The API supports a maximum size of 65536 bytes (64 Kilobytes) in the HTTP header.
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// PartyResult : Data model for the complex type PartyResult.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PartyResult {
  /// Party Id type, id, sub ID or type, and FSP Id.
  #[serde(rename = "partyId")]
  party_id: ::models::PartyIdInfo,
  /// If the Party failed to be added, error information should be provided. Otherwise, this parameter should be empty to indicate success.
  #[serde(rename = "errorInformation")]
  error_information: Option<::models::ErrorInformation>
}

impl PartyResult {
  /// Data model for the complex type PartyResult.
  pub fn new(party_id: ::models::PartyIdInfo) -> PartyResult {
    PartyResult {
      party_id: party_id,
      error_information: None
    }
  }

  pub fn set_party_id(&mut self, party_id: ::models::PartyIdInfo) {
    self.party_id = party_id;
  }

  pub fn with_party_id(mut self, party_id: ::models::PartyIdInfo) -> PartyResult {
    self.party_id = party_id;
    self
  }

  pub fn party_id(&self) -> &::models::PartyIdInfo {
    &self.party_id
  }


  pub fn set_error_information(&mut self, error_information: ::models::ErrorInformation) {
    self.error_information = Some(error_information);
  }

  pub fn with_error_information(mut self, error_information: ::models::ErrorInformation) -> PartyResult {
    self.error_information = Some(error_information);
    self
  }

  pub fn error_information(&self) -> Option<&::models::ErrorInformation> {
    self.error_information.as_ref()
  }

  pub fn reset_error_information(&mut self) {
    self.error_information = None;
  }

}



