/* 
 * Open API for FSP Interoperability (FSPIOP)
 *
 * Based on API Definition.docx updated on 2020-05-19 Version 1.1. Note - The API supports a maximum size of 65536 bytes (64 Kilobytes) in the HTTP header.
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// IndividualTransferResult : Data model for the complex type IndividualTransferResult.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IndividualTransferResult {
  /// Identifies messages related to the same /transfers sequence.
  #[serde(rename = "transferId")]
  transfer_id: ::models::CorrelationId,
  /// Fulfilment of the condition specified with the transaction. Note - Either fulfilment or errorInformation should be set, not both.
  #[serde(rename = "fulfilment")]
  fulfilment: Option<::models::IlpFulfilment>,
  /// If transfer is REJECTED, error information may be provided. Note - Either fulfilment or errorInformation should be set, not both.
  #[serde(rename = "errorInformation")]
  error_information: Option<::models::ErrorInformation>,
  /// Optional extension, specific to deployment.
  #[serde(rename = "extensionList")]
  extension_list: Option<::models::ExtensionList>
}

impl IndividualTransferResult {
  /// Data model for the complex type IndividualTransferResult.
  pub fn new(transfer_id: ::models::CorrelationId) -> IndividualTransferResult {
    IndividualTransferResult {
      transfer_id: transfer_id,
      fulfilment: None,
      error_information: None,
      extension_list: None
    }
  }

  pub fn set_transfer_id(&mut self, transfer_id: ::models::CorrelationId) {
    self.transfer_id = transfer_id;
  }

  pub fn with_transfer_id(mut self, transfer_id: ::models::CorrelationId) -> IndividualTransferResult {
    self.transfer_id = transfer_id;
    self
  }

  pub fn transfer_id(&self) -> &::models::CorrelationId {
    &self.transfer_id
  }


  pub fn set_fulfilment(&mut self, fulfilment: ::models::IlpFulfilment) {
    self.fulfilment = Some(fulfilment);
  }

  pub fn with_fulfilment(mut self, fulfilment: ::models::IlpFulfilment) -> IndividualTransferResult {
    self.fulfilment = Some(fulfilment);
    self
  }

  pub fn fulfilment(&self) -> Option<&::models::IlpFulfilment> {
    self.fulfilment.as_ref()
  }

  pub fn reset_fulfilment(&mut self) {
    self.fulfilment = None;
  }

  pub fn set_error_information(&mut self, error_information: ::models::ErrorInformation) {
    self.error_information = Some(error_information);
  }

  pub fn with_error_information(mut self, error_information: ::models::ErrorInformation) -> IndividualTransferResult {
    self.error_information = Some(error_information);
    self
  }

  pub fn error_information(&self) -> Option<&::models::ErrorInformation> {
    self.error_information.as_ref()
  }

  pub fn reset_error_information(&mut self) {
    self.error_information = None;
  }

  pub fn set_extension_list(&mut self, extension_list: ::models::ExtensionList) {
    self.extension_list = Some(extension_list);
  }

  pub fn with_extension_list(mut self, extension_list: ::models::ExtensionList) -> IndividualTransferResult {
    self.extension_list = Some(extension_list);
    self
  }

  pub fn extension_list(&self) -> Option<&::models::ExtensionList> {
    self.extension_list.as_ref()
  }

  pub fn reset_extension_list(&mut self) {
    self.extension_list = None;
  }

}



