/* 
 * Open API for FSP Interoperability (FSPIOP)
 *
 * Based on API Definition.docx updated on 2020-05-19 Version 1.1. Note - The API supports a maximum size of 65536 bytes (64 Kilobytes) in the HTTP header.
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GeoCode : Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GeoCode {
  /// Latitude of the Party.
  #[serde(rename = "latitude")]
  latitude: ::models::Latitude,
  /// Longitude of the   Party.
  #[serde(rename = "longitude")]
  longitude: ::models::Longitude
}

impl GeoCode {
  /// Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.
  pub fn new(latitude: ::models::Latitude, longitude: ::models::Longitude) -> GeoCode {
    GeoCode {
      latitude: latitude,
      longitude: longitude
    }
  }

  pub fn set_latitude(&mut self, latitude: ::models::Latitude) {
    self.latitude = latitude;
  }

  pub fn with_latitude(mut self, latitude: ::models::Latitude) -> GeoCode {
    self.latitude = latitude;
    self
  }

  pub fn latitude(&self) -> &::models::Latitude {
    &self.latitude
  }


  pub fn set_longitude(&mut self, longitude: ::models::Longitude) {
    self.longitude = longitude;
  }

  pub fn with_longitude(mut self, longitude: ::models::Longitude) -> GeoCode {
    self.longitude = longitude;
    self
  }

  pub fn longitude(&self) -> &::models::Longitude {
    &self.longitude
  }


}



