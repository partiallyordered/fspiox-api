/* 
 * Open API for FSP Interoperability (FSPIOP)
 *
 * Based on API Definition.docx updated on 2020-05-19 Version 1.1. Note - The API supports a maximum size of 65536 bytes (64 Kilobytes) in the HTTP header.
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ParticipantsPostRequest : POST /participants object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ParticipantsPostRequest {
  /// The ID of the request, decided by the client. Used for identification of the callback from the server.
  #[serde(rename = "requestId")]
  request_id: ::models::CorrelationId,
  /// List of PartyIdInfo elements that the client would like to update or create FSP information about.
  #[serde(rename = "partyList")]
  party_list: Vec<::models::PartyIdInfo>,
  /// Indicate that the provided Currency is supported by each PartyIdInfo in the list.
  #[serde(rename = "currency")]
  currency: Option<::models::Currency>
}

impl ParticipantsPostRequest {
  /// POST /participants object
  pub fn new(request_id: ::models::CorrelationId, party_list: Vec<::models::PartyIdInfo>) -> ParticipantsPostRequest {
    ParticipantsPostRequest {
      request_id: request_id,
      party_list: party_list,
      currency: None
    }
  }

  pub fn set_request_id(&mut self, request_id: ::models::CorrelationId) {
    self.request_id = request_id;
  }

  pub fn with_request_id(mut self, request_id: ::models::CorrelationId) -> ParticipantsPostRequest {
    self.request_id = request_id;
    self
  }

  pub fn request_id(&self) -> &::models::CorrelationId {
    &self.request_id
  }


  pub fn set_party_list(&mut self, party_list: Vec<::models::PartyIdInfo>) {
    self.party_list = party_list;
  }

  pub fn with_party_list(mut self, party_list: Vec<::models::PartyIdInfo>) -> ParticipantsPostRequest {
    self.party_list = party_list;
    self
  }

  pub fn party_list(&self) -> &Vec<::models::PartyIdInfo> {
    &self.party_list
  }


  pub fn set_currency(&mut self, currency: ::models::Currency) {
    self.currency = Some(currency);
  }

  pub fn with_currency(mut self, currency: ::models::Currency) -> ParticipantsPostRequest {
    self.currency = Some(currency);
    self
  }

  pub fn currency(&self) -> Option<&::models::Currency> {
    self.currency.as_ref()
  }

  pub fn reset_currency(&mut self) {
    self.currency = None;
  }

}



