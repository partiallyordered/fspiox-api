/*
 * Open API for FSP Interoperability (FSPIOP)
 *
 * Based on API Definition.docx updated on 2020-05-19 Version 1.1. Note - The API supports a maximum size of 65536 bytes (64 Kilobytes) in the HTTP header.
 *
 * The version of the OpenAPI document: 1.1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// ParticipantsPostRequest : POST /participants object



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ParticipantsPostRequest {
    /// Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to RFC 4122, that is restricted by a regular expression for interoperability reasons. An UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
    #[serde(rename = "requestId")]
    pub request_id: String,
    /// List of PartyIdInfo elements that the client would like to update or create FSP information about.
    #[serde(rename = "partyList")]
    pub party_list: Vec<crate::models::PartyIdInfo>,
    #[serde(rename = "currency", skip_serializing_if = "Option::is_none")]
    pub currency: Option<crate::models::Currency>,
}

impl ParticipantsPostRequest {
    /// POST /participants object
    pub fn new(request_id: String, party_list: Vec<crate::models::PartyIdInfo>) -> ParticipantsPostRequest {
        ParticipantsPostRequest {
            request_id,
            party_list,
            currency: None,
        }
    }
}


