/* 
 * Open API for FSP Interoperability (FSPIOP)
 *
 * Based on API Definition.docx updated on 2020-05-19 Version 1.1. Note - The API supports a maximum size of 65536 bytes (64 Kilobytes) in the HTTP header.
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// TransactionsIdPutResponse : PUT /transactions/{ID} object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct TransactionsIdPutResponse {
  /// Time and date when the transaction was completed.
  #[serde(rename = "completedTimestamp")]
  completed_timestamp: Option<String>,
  /// State of the transaction.
  #[serde(rename = "transactionState")]
  transaction_state: ::models::TransactionState,
  /// Optional redemption information provided to Payer after transaction has been completed.
  #[serde(rename = "code")]
  code: Option<::models::Code>,
  /// Optional extension, specific to deployment.
  #[serde(rename = "extensionList")]
  extension_list: Option<::models::ExtensionList>
}

impl TransactionsIdPutResponse {
  /// PUT /transactions/{ID} object
  pub fn new(transaction_state: ::models::TransactionState) -> TransactionsIdPutResponse {
    TransactionsIdPutResponse {
      completed_timestamp: None,
      transaction_state: transaction_state,
      code: None,
      extension_list: None
    }
  }

  pub fn set_completed_timestamp(&mut self, completed_timestamp: String) {
    self.completed_timestamp = Some(completed_timestamp);
  }

  pub fn with_completed_timestamp(mut self, completed_timestamp: String) -> TransactionsIdPutResponse {
    self.completed_timestamp = Some(completed_timestamp);
    self
  }

  pub fn completed_timestamp(&self) -> Option<&String> {
    self.completed_timestamp.as_ref()
  }

  pub fn reset_completed_timestamp(&mut self) {
    self.completed_timestamp = None;
  }

  pub fn set_transaction_state(&mut self, transaction_state: ::models::TransactionState) {
    self.transaction_state = transaction_state;
  }

  pub fn with_transaction_state(mut self, transaction_state: ::models::TransactionState) -> TransactionsIdPutResponse {
    self.transaction_state = transaction_state;
    self
  }

  pub fn transaction_state(&self) -> &::models::TransactionState {
    &self.transaction_state
  }


  pub fn set_code(&mut self, code: ::models::Code) {
    self.code = Some(code);
  }

  pub fn with_code(mut self, code: ::models::Code) -> TransactionsIdPutResponse {
    self.code = Some(code);
    self
  }

  pub fn code(&self) -> Option<&::models::Code> {
    self.code.as_ref()
  }

  pub fn reset_code(&mut self) {
    self.code = None;
  }

  pub fn set_extension_list(&mut self, extension_list: ::models::ExtensionList) {
    self.extension_list = Some(extension_list);
  }

  pub fn with_extension_list(mut self, extension_list: ::models::ExtensionList) -> TransactionsIdPutResponse {
    self.extension_list = Some(extension_list);
    self
  }

  pub fn extension_list(&self) -> Option<&::models::ExtensionList> {
    self.extension_list.as_ref()
  }

  pub fn reset_extension_list(&mut self) {
    self.extension_list = None;
  }

}



