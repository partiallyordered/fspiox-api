/* 
 * Open API for FSP Interoperability (FSPIOP)
 *
 * Based on API Definition.docx updated on 2020-05-19 Version 1.1. Note - The API supports a maximum size of 65536 bytes (64 Kilobytes) in the HTTP header.
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// QuotesPostRequest : POST /quotes object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct QuotesPostRequest {
  /// Common ID between the FSPs for the quote object, decided by the Payer FSP. The ID should be reused for resends of the same quote for a transaction. A new ID should be generated for each new quote for a transaction.
  #[serde(rename = "quoteId")]
  quote_id: ::models::CorrelationId,
  /// Common ID (decided by the Payer FSP) between the FSPs for the future transaction object. The actual transaction will be created as part of a successful transfer process. The ID should be reused for resends of the same quote for a transaction. A new ID should be generated for each new quote for a transaction.
  #[serde(rename = "transactionId")]
  transaction_id: ::models::CorrelationId,
  /// Identifies an optional previously-sent transaction request.
  #[serde(rename = "transactionRequestId")]
  transaction_request_id: Option<::models::CorrelationId>,
  /// Information about the Payee in the proposed financial transaction.
  #[serde(rename = "payee")]
  payee: ::models::Party,
  /// Information about the Payer in the proposed financial transaction.
  #[serde(rename = "payer")]
  payer: ::models::Party,
  /// SEND for send amount, RECEIVE for receive amount.
  #[serde(rename = "amountType")]
  amount_type: ::models::AmountType,
  /// Depending on amountType. If SEND - The amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees. The amount is updated by each participating entity in the transaction. If RECEIVE - The amount the Payee should receive, that is, the amount that should be sent to the receiver exclusive any fees. The amount is not updated by any of the participating entities.
  #[serde(rename = "amount")]
  amount: ::models::Money,
  /// The fees in the transaction. The fees element should be empty if fees should be non-disclosed. The fees element should be non-empty if fees should be disclosed.
  #[serde(rename = "fees")]
  fees: Option<::models::Money>,
  /// Type of transaction for which the quote is requested.
  #[serde(rename = "transactionType")]
  transaction_type: ::models::TransactionType,
  /// Longitude and Latitude of the initiating Party. Can be used to detect fraud.
  #[serde(rename = "geoCode")]
  geo_code: Option<::models::GeoCode>,
  /// A memo that will be attached to the transaction.
  #[serde(rename = "note")]
  note: Option<::models::Note>,
  /// Expiration is optional. It can be set to get a quick failure in case the peer FSP takes too long to respond. Also, it may be beneficial for Consumer, Agent, and Merchant to know that their request has a time limit.
  #[serde(rename = "expiration")]
  expiration: Option<String>,
  /// Optional extension, specific to deployment.
  #[serde(rename = "extensionList")]
  extension_list: Option<::models::ExtensionList>
}

impl QuotesPostRequest {
  /// POST /quotes object
  pub fn new(quote_id: ::models::CorrelationId, transaction_id: ::models::CorrelationId, payee: ::models::Party, payer: ::models::Party, amount_type: ::models::AmountType, amount: ::models::Money, transaction_type: ::models::TransactionType) -> QuotesPostRequest {
    QuotesPostRequest {
      quote_id: quote_id,
      transaction_id: transaction_id,
      transaction_request_id: None,
      payee: payee,
      payer: payer,
      amount_type: amount_type,
      amount: amount,
      fees: None,
      transaction_type: transaction_type,
      geo_code: None,
      note: None,
      expiration: None,
      extension_list: None
    }
  }

  pub fn set_quote_id(&mut self, quote_id: ::models::CorrelationId) {
    self.quote_id = quote_id;
  }

  pub fn with_quote_id(mut self, quote_id: ::models::CorrelationId) -> QuotesPostRequest {
    self.quote_id = quote_id;
    self
  }

  pub fn quote_id(&self) -> &::models::CorrelationId {
    &self.quote_id
  }


  pub fn set_transaction_id(&mut self, transaction_id: ::models::CorrelationId) {
    self.transaction_id = transaction_id;
  }

  pub fn with_transaction_id(mut self, transaction_id: ::models::CorrelationId) -> QuotesPostRequest {
    self.transaction_id = transaction_id;
    self
  }

  pub fn transaction_id(&self) -> &::models::CorrelationId {
    &self.transaction_id
  }


  pub fn set_transaction_request_id(&mut self, transaction_request_id: ::models::CorrelationId) {
    self.transaction_request_id = Some(transaction_request_id);
  }

  pub fn with_transaction_request_id(mut self, transaction_request_id: ::models::CorrelationId) -> QuotesPostRequest {
    self.transaction_request_id = Some(transaction_request_id);
    self
  }

  pub fn transaction_request_id(&self) -> Option<&::models::CorrelationId> {
    self.transaction_request_id.as_ref()
  }

  pub fn reset_transaction_request_id(&mut self) {
    self.transaction_request_id = None;
  }

  pub fn set_payee(&mut self, payee: ::models::Party) {
    self.payee = payee;
  }

  pub fn with_payee(mut self, payee: ::models::Party) -> QuotesPostRequest {
    self.payee = payee;
    self
  }

  pub fn payee(&self) -> &::models::Party {
    &self.payee
  }


  pub fn set_payer(&mut self, payer: ::models::Party) {
    self.payer = payer;
  }

  pub fn with_payer(mut self, payer: ::models::Party) -> QuotesPostRequest {
    self.payer = payer;
    self
  }

  pub fn payer(&self) -> &::models::Party {
    &self.payer
  }


  pub fn set_amount_type(&mut self, amount_type: ::models::AmountType) {
    self.amount_type = amount_type;
  }

  pub fn with_amount_type(mut self, amount_type: ::models::AmountType) -> QuotesPostRequest {
    self.amount_type = amount_type;
    self
  }

  pub fn amount_type(&self) -> &::models::AmountType {
    &self.amount_type
  }


  pub fn set_amount(&mut self, amount: ::models::Money) {
    self.amount = amount;
  }

  pub fn with_amount(mut self, amount: ::models::Money) -> QuotesPostRequest {
    self.amount = amount;
    self
  }

  pub fn amount(&self) -> &::models::Money {
    &self.amount
  }


  pub fn set_fees(&mut self, fees: ::models::Money) {
    self.fees = Some(fees);
  }

  pub fn with_fees(mut self, fees: ::models::Money) -> QuotesPostRequest {
    self.fees = Some(fees);
    self
  }

  pub fn fees(&self) -> Option<&::models::Money> {
    self.fees.as_ref()
  }

  pub fn reset_fees(&mut self) {
    self.fees = None;
  }

  pub fn set_transaction_type(&mut self, transaction_type: ::models::TransactionType) {
    self.transaction_type = transaction_type;
  }

  pub fn with_transaction_type(mut self, transaction_type: ::models::TransactionType) -> QuotesPostRequest {
    self.transaction_type = transaction_type;
    self
  }

  pub fn transaction_type(&self) -> &::models::TransactionType {
    &self.transaction_type
  }


  pub fn set_geo_code(&mut self, geo_code: ::models::GeoCode) {
    self.geo_code = Some(geo_code);
  }

  pub fn with_geo_code(mut self, geo_code: ::models::GeoCode) -> QuotesPostRequest {
    self.geo_code = Some(geo_code);
    self
  }

  pub fn geo_code(&self) -> Option<&::models::GeoCode> {
    self.geo_code.as_ref()
  }

  pub fn reset_geo_code(&mut self) {
    self.geo_code = None;
  }

  pub fn set_note(&mut self, note: ::models::Note) {
    self.note = Some(note);
  }

  pub fn with_note(mut self, note: ::models::Note) -> QuotesPostRequest {
    self.note = Some(note);
    self
  }

  pub fn note(&self) -> Option<&::models::Note> {
    self.note.as_ref()
  }

  pub fn reset_note(&mut self) {
    self.note = None;
  }

  pub fn set_expiration(&mut self, expiration: String) {
    self.expiration = Some(expiration);
  }

  pub fn with_expiration(mut self, expiration: String) -> QuotesPostRequest {
    self.expiration = Some(expiration);
    self
  }

  pub fn expiration(&self) -> Option<&String> {
    self.expiration.as_ref()
  }

  pub fn reset_expiration(&mut self) {
    self.expiration = None;
  }

  pub fn set_extension_list(&mut self, extension_list: ::models::ExtensionList) {
    self.extension_list = Some(extension_list);
  }

  pub fn with_extension_list(mut self, extension_list: ::models::ExtensionList) -> QuotesPostRequest {
    self.extension_list = Some(extension_list);
    self
  }

  pub fn extension_list(&self) -> Option<&::models::ExtensionList> {
    self.extension_list.as_ref()
  }

  pub fn reset_extension_list(&mut self) {
    self.extension_list = None;
  }

}



