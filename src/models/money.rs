/* 
 * Open API for FSP Interoperability (FSPIOP)
 *
 * Based on API Definition.docx updated on 2020-05-19 Version 1.1. Note - The API supports a maximum size of 65536 bytes (64 Kilobytes) in the HTTP header.
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Money : Data model for the complex type Money.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Money {
  /// Currency of the amount.
  #[serde(rename = "currency")]
  currency: ::models::Currency,
  /// Amount of Money.
  #[serde(rename = "amount")]
  amount: ::models::Amount
}

impl Money {
  /// Data model for the complex type Money.
  pub fn new(currency: ::models::Currency, amount: ::models::Amount) -> Money {
    Money {
      currency: currency,
      amount: amount
    }
  }

  pub fn set_currency(&mut self, currency: ::models::Currency) {
    self.currency = currency;
  }

  pub fn with_currency(mut self, currency: ::models::Currency) -> Money {
    self.currency = currency;
    self
  }

  pub fn currency(&self) -> &::models::Currency {
    &self.currency
  }


  pub fn set_amount(&mut self, amount: ::models::Amount) {
    self.amount = amount;
  }

  pub fn with_amount(mut self, amount: ::models::Amount) -> Money {
    self.amount = amount;
    self
  }

  pub fn amount(&self) -> &::models::Amount {
    &self.amount
  }


}



