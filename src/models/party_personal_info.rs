/* 
 * Open API for FSP Interoperability (FSPIOP)
 *
 * Based on API Definition.docx updated on 2020-05-19 Version 1.1. Note - The API supports a maximum size of 65536 bytes (64 Kilobytes) in the HTTP header.
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// PartyPersonalInfo : Data model for the complex type PartyPersonalInfo.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PartyPersonalInfo {
  /// First, middle and last name for the Party.
  #[serde(rename = "complexName")]
  complex_name: Option<::models::PartyComplexName>,
  /// Date of birth for the Party.
  #[serde(rename = "dateOfBirth")]
  date_of_birth: Option<::models::DateOfBirth>
}

impl PartyPersonalInfo {
  /// Data model for the complex type PartyPersonalInfo.
  pub fn new() -> PartyPersonalInfo {
    PartyPersonalInfo {
      complex_name: None,
      date_of_birth: None
    }
  }

  pub fn set_complex_name(&mut self, complex_name: ::models::PartyComplexName) {
    self.complex_name = Some(complex_name);
  }

  pub fn with_complex_name(mut self, complex_name: ::models::PartyComplexName) -> PartyPersonalInfo {
    self.complex_name = Some(complex_name);
    self
  }

  pub fn complex_name(&self) -> Option<&::models::PartyComplexName> {
    self.complex_name.as_ref()
  }

  pub fn reset_complex_name(&mut self) {
    self.complex_name = None;
  }

  pub fn set_date_of_birth(&mut self, date_of_birth: ::models::DateOfBirth) {
    self.date_of_birth = Some(date_of_birth);
  }

  pub fn with_date_of_birth(mut self, date_of_birth: ::models::DateOfBirth) -> PartyPersonalInfo {
    self.date_of_birth = Some(date_of_birth);
    self
  }

  pub fn date_of_birth(&self) -> Option<&::models::DateOfBirth> {
    self.date_of_birth.as_ref()
  }

  pub fn reset_date_of_birth(&mut self) {
    self.date_of_birth = None;
  }

}



