/* 
 * Open API for FSP Interoperability (FSPIOP)
 *
 * Based on API Definition.docx updated on 2020-05-19 Version 1.1. Note - The API supports a maximum size of 65536 bytes (64 Kilobytes) in the HTTP header.
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ParticipantsTypeIdSubIdPostRequest : POST /participants/{Type}/{ID}/{SubId}, /participants/{Type}/{ID} object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ParticipantsTypeIdSubIdPostRequest {
  /// FSP Identifier that the Party belongs to.
  #[serde(rename = "fspId")]
  fsp_id: ::models::FspId,
  /// Indicate that the provided Currency is supported by the Party.
  #[serde(rename = "currency")]
  currency: Option<::models::Currency>,
  /// Optional extension, specific to deployment.
  #[serde(rename = "extensionList")]
  extension_list: Option<::models::ExtensionList>
}

impl ParticipantsTypeIdSubIdPostRequest {
  /// POST /participants/{Type}/{ID}/{SubId}, /participants/{Type}/{ID} object
  pub fn new(fsp_id: ::models::FspId) -> ParticipantsTypeIdSubIdPostRequest {
    ParticipantsTypeIdSubIdPostRequest {
      fsp_id: fsp_id,
      currency: None,
      extension_list: None
    }
  }

  pub fn set_fsp_id(&mut self, fsp_id: ::models::FspId) {
    self.fsp_id = fsp_id;
  }

  pub fn with_fsp_id(mut self, fsp_id: ::models::FspId) -> ParticipantsTypeIdSubIdPostRequest {
    self.fsp_id = fsp_id;
    self
  }

  pub fn fsp_id(&self) -> &::models::FspId {
    &self.fsp_id
  }


  pub fn set_currency(&mut self, currency: ::models::Currency) {
    self.currency = Some(currency);
  }

  pub fn with_currency(mut self, currency: ::models::Currency) -> ParticipantsTypeIdSubIdPostRequest {
    self.currency = Some(currency);
    self
  }

  pub fn currency(&self) -> Option<&::models::Currency> {
    self.currency.as_ref()
  }

  pub fn reset_currency(&mut self) {
    self.currency = None;
  }

  pub fn set_extension_list(&mut self, extension_list: ::models::ExtensionList) {
    self.extension_list = Some(extension_list);
  }

  pub fn with_extension_list(mut self, extension_list: ::models::ExtensionList) -> ParticipantsTypeIdSubIdPostRequest {
    self.extension_list = Some(extension_list);
    self
  }

  pub fn extension_list(&self) -> Option<&::models::ExtensionList> {
    self.extension_list.as_ref()
  }

  pub fn reset_extension_list(&mut self) {
    self.extension_list = None;
  }

}



