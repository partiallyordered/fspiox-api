/* 
 * Open API for FSP Interoperability (FSPIOP)
 *
 * Based on API Definition.docx updated on 2020-05-19 Version 1.1. Note - The API supports a maximum size of 65536 bytes (64 Kilobytes) in the HTTP header.
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ParticipantsTypeIdPutResponse : PUT /participants/{Type}/{ID}/{SubId}, /participants/{Type}/{ID} object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ParticipantsTypeIdPutResponse {
  /// FSP Identifier that the Party belongs to.
  #[serde(rename = "fspId")]
  fsp_id: Option<::models::FspId>
}

impl ParticipantsTypeIdPutResponse {
  /// PUT /participants/{Type}/{ID}/{SubId}, /participants/{Type}/{ID} object
  pub fn new() -> ParticipantsTypeIdPutResponse {
    ParticipantsTypeIdPutResponse {
      fsp_id: None
    }
  }

  pub fn set_fsp_id(&mut self, fsp_id: ::models::FspId) {
    self.fsp_id = Some(fsp_id);
  }

  pub fn with_fsp_id(mut self, fsp_id: ::models::FspId) -> ParticipantsTypeIdPutResponse {
    self.fsp_id = Some(fsp_id);
    self
  }

  pub fn fsp_id(&self) -> Option<&::models::FspId> {
    self.fsp_id.as_ref()
  }

  pub fn reset_fsp_id(&mut self) {
    self.fsp_id = None;
  }

}



