/*
 * Open API for FSP Interoperability (FSPIOP)
 *
 * Based on API Definition.docx updated on 2020-05-19 Version 1.1. Note - The API supports a maximum size of 65536 bytes (64 Kilobytes) in the HTTP header.
 *
 * The version of the OpenAPI document: 1.1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// TransactionRequestsIdPutResponse : PUT /transactionRequests/{ID} object



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransactionRequestsIdPutResponse {
    /// Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to RFC 4122, that is restricted by a regular expression for interoperability reasons. An UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
    #[serde(rename = "transactionId", skip_serializing_if = "Option::is_none")]
    pub transaction_id: Option<String>,
    #[serde(rename = "transactionRequestState")]
    pub transaction_request_state: crate::models::TransactionRequestState,
    #[serde(rename = "extensionList", skip_serializing_if = "Option::is_none")]
    pub extension_list: Option<crate::models::ExtensionList>,
}

impl TransactionRequestsIdPutResponse {
    /// PUT /transactionRequests/{ID} object
    pub fn new(transaction_request_state: crate::models::TransactionRequestState) -> TransactionRequestsIdPutResponse {
        TransactionRequestsIdPutResponse {
            transaction_id: None,
            transaction_request_state,
            extension_list: None,
        }
    }
}


