/* 
 * Open API for FSP Interoperability (FSPIOP)
 *
 * Based on API Definition.docx updated on 2020-05-19 Version 1.1. Note - The API supports a maximum size of 65536 bytes (64 Kilobytes) in the HTTP header.
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// TransactionRequestsIdPutResponse : PUT /transactionRequests/{ID} object

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct TransactionRequestsIdPutResponse {
  /// Identifies a related transaction (if a transaction has been created).
  #[serde(rename = "transactionId")]
  transaction_id: Option<::models::CorrelationId>,
  /// State of the transaction request.
  #[serde(rename = "transactionRequestState")]
  transaction_request_state: ::models::TransactionRequestState,
  /// Optional extension, specific to deployment.
  #[serde(rename = "extensionList")]
  extension_list: Option<::models::ExtensionList>
}

impl TransactionRequestsIdPutResponse {
  /// PUT /transactionRequests/{ID} object
  pub fn new(transaction_request_state: ::models::TransactionRequestState) -> TransactionRequestsIdPutResponse {
    TransactionRequestsIdPutResponse {
      transaction_id: None,
      transaction_request_state: transaction_request_state,
      extension_list: None
    }
  }

  pub fn set_transaction_id(&mut self, transaction_id: ::models::CorrelationId) {
    self.transaction_id = Some(transaction_id);
  }

  pub fn with_transaction_id(mut self, transaction_id: ::models::CorrelationId) -> TransactionRequestsIdPutResponse {
    self.transaction_id = Some(transaction_id);
    self
  }

  pub fn transaction_id(&self) -> Option<&::models::CorrelationId> {
    self.transaction_id.as_ref()
  }

  pub fn reset_transaction_id(&mut self) {
    self.transaction_id = None;
  }

  pub fn set_transaction_request_state(&mut self, transaction_request_state: ::models::TransactionRequestState) {
    self.transaction_request_state = transaction_request_state;
  }

  pub fn with_transaction_request_state(mut self, transaction_request_state: ::models::TransactionRequestState) -> TransactionRequestsIdPutResponse {
    self.transaction_request_state = transaction_request_state;
    self
  }

  pub fn transaction_request_state(&self) -> &::models::TransactionRequestState {
    &self.transaction_request_state
  }


  pub fn set_extension_list(&mut self, extension_list: ::models::ExtensionList) {
    self.extension_list = Some(extension_list);
  }

  pub fn with_extension_list(mut self, extension_list: ::models::ExtensionList) -> TransactionRequestsIdPutResponse {
    self.extension_list = Some(extension_list);
    self
  }

  pub fn extension_list(&self) -> Option<&::models::ExtensionList> {
    self.extension_list.as_ref()
  }

  pub fn reset_extension_list(&mut self) {
    self.extension_list = None;
  }

}



