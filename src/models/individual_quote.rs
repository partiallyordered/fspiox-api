/* 
 * Open API for FSP Interoperability (FSPIOP)
 *
 * Based on API Definition.docx updated on 2020-05-19 Version 1.1. Note - The API supports a maximum size of 65536 bytes (64 Kilobytes) in the HTTP header.
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// IndividualQuote : Data model for the complex type IndividualQuote.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IndividualQuote {
  /// Identifies quote message.
  #[serde(rename = "quoteId")]
  quote_id: ::models::CorrelationId,
  /// Identifies transaction message.
  #[serde(rename = "transactionId")]
  transaction_id: ::models::CorrelationId,
  /// Information about the Payee in the proposed financial transaction.
  #[serde(rename = "payee")]
  payee: ::models::Party,
  /// SEND for sendAmount, RECEIVE for receiveAmount.
  #[serde(rename = "amountType")]
  amount_type: ::models::AmountType,
  /// Depending on amountType - If SEND - The amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees. The amount is updated by each participating entity in the transaction. If RECEIVE - The amount the Payee should receive, that is, the amount that should be sent to the receiver exclusive any fees. The amount is not updated by any of the participating entities.
  #[serde(rename = "amount")]
  amount: ::models::Money,
  /// The fees in the transaction. The fees element should be empty if fees should be non-disclosed. The fees element should be non-empty if fees should be disclosed.
  #[serde(rename = "fees")]
  fees: Option<::models::Money>,
  /// Type of transaction that the quote is requested for.
  #[serde(rename = "transactionType")]
  transaction_type: ::models::TransactionType,
  /// Memo that will be attached to the transaction.
  #[serde(rename = "note")]
  note: Option<::models::Note>,
  /// Optional extension, specific to deployment.
  #[serde(rename = "extensionList")]
  extension_list: Option<::models::ExtensionList>
}

impl IndividualQuote {
  /// Data model for the complex type IndividualQuote.
  pub fn new(quote_id: ::models::CorrelationId, transaction_id: ::models::CorrelationId, payee: ::models::Party, amount_type: ::models::AmountType, amount: ::models::Money, transaction_type: ::models::TransactionType) -> IndividualQuote {
    IndividualQuote {
      quote_id: quote_id,
      transaction_id: transaction_id,
      payee: payee,
      amount_type: amount_type,
      amount: amount,
      fees: None,
      transaction_type: transaction_type,
      note: None,
      extension_list: None
    }
  }

  pub fn set_quote_id(&mut self, quote_id: ::models::CorrelationId) {
    self.quote_id = quote_id;
  }

  pub fn with_quote_id(mut self, quote_id: ::models::CorrelationId) -> IndividualQuote {
    self.quote_id = quote_id;
    self
  }

  pub fn quote_id(&self) -> &::models::CorrelationId {
    &self.quote_id
  }


  pub fn set_transaction_id(&mut self, transaction_id: ::models::CorrelationId) {
    self.transaction_id = transaction_id;
  }

  pub fn with_transaction_id(mut self, transaction_id: ::models::CorrelationId) -> IndividualQuote {
    self.transaction_id = transaction_id;
    self
  }

  pub fn transaction_id(&self) -> &::models::CorrelationId {
    &self.transaction_id
  }


  pub fn set_payee(&mut self, payee: ::models::Party) {
    self.payee = payee;
  }

  pub fn with_payee(mut self, payee: ::models::Party) -> IndividualQuote {
    self.payee = payee;
    self
  }

  pub fn payee(&self) -> &::models::Party {
    &self.payee
  }


  pub fn set_amount_type(&mut self, amount_type: ::models::AmountType) {
    self.amount_type = amount_type;
  }

  pub fn with_amount_type(mut self, amount_type: ::models::AmountType) -> IndividualQuote {
    self.amount_type = amount_type;
    self
  }

  pub fn amount_type(&self) -> &::models::AmountType {
    &self.amount_type
  }


  pub fn set_amount(&mut self, amount: ::models::Money) {
    self.amount = amount;
  }

  pub fn with_amount(mut self, amount: ::models::Money) -> IndividualQuote {
    self.amount = amount;
    self
  }

  pub fn amount(&self) -> &::models::Money {
    &self.amount
  }


  pub fn set_fees(&mut self, fees: ::models::Money) {
    self.fees = Some(fees);
  }

  pub fn with_fees(mut self, fees: ::models::Money) -> IndividualQuote {
    self.fees = Some(fees);
    self
  }

  pub fn fees(&self) -> Option<&::models::Money> {
    self.fees.as_ref()
  }

  pub fn reset_fees(&mut self) {
    self.fees = None;
  }

  pub fn set_transaction_type(&mut self, transaction_type: ::models::TransactionType) {
    self.transaction_type = transaction_type;
  }

  pub fn with_transaction_type(mut self, transaction_type: ::models::TransactionType) -> IndividualQuote {
    self.transaction_type = transaction_type;
    self
  }

  pub fn transaction_type(&self) -> &::models::TransactionType {
    &self.transaction_type
  }


  pub fn set_note(&mut self, note: ::models::Note) {
    self.note = Some(note);
  }

  pub fn with_note(mut self, note: ::models::Note) -> IndividualQuote {
    self.note = Some(note);
    self
  }

  pub fn note(&self) -> Option<&::models::Note> {
    self.note.as_ref()
  }

  pub fn reset_note(&mut self) {
    self.note = None;
  }

  pub fn set_extension_list(&mut self, extension_list: ::models::ExtensionList) {
    self.extension_list = Some(extension_list);
  }

  pub fn with_extension_list(mut self, extension_list: ::models::ExtensionList) -> IndividualQuote {
    self.extension_list = Some(extension_list);
    self
  }

  pub fn extension_list(&self) -> Option<&::models::ExtensionList> {
    self.extension_list.as_ref()
  }

  pub fn reset_extension_list(&mut self) {
    self.extension_list = None;
  }

}



