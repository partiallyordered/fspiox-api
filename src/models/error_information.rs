/* 
 * Open API for FSP Interoperability (FSPIOP)
 *
 * Based on API Definition.docx updated on 2020-05-19 Version 1.1. Note - The API supports a maximum size of 65536 bytes (64 Kilobytes) in the HTTP header.
 *
 * OpenAPI spec version: 1.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ErrorInformation : Data model for the complex type ErrorInformation.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ErrorInformation {
  /// Specific error number.
  #[serde(rename = "errorCode")]
  error_code: ::models::ErrorCode,
  /// Error description string.
  #[serde(rename = "errorDescription")]
  error_description: ::models::ErrorDescription,
  /// Optional list of extensions, specific to deployment.
  #[serde(rename = "extensionList")]
  extension_list: Option<::models::ExtensionList>
}

impl ErrorInformation {
  /// Data model for the complex type ErrorInformation.
  pub fn new(error_code: ::models::ErrorCode, error_description: ::models::ErrorDescription) -> ErrorInformation {
    ErrorInformation {
      error_code: error_code,
      error_description: error_description,
      extension_list: None
    }
  }

  pub fn set_error_code(&mut self, error_code: ::models::ErrorCode) {
    self.error_code = error_code;
  }

  pub fn with_error_code(mut self, error_code: ::models::ErrorCode) -> ErrorInformation {
    self.error_code = error_code;
    self
  }

  pub fn error_code(&self) -> &::models::ErrorCode {
    &self.error_code
  }


  pub fn set_error_description(&mut self, error_description: ::models::ErrorDescription) {
    self.error_description = error_description;
  }

  pub fn with_error_description(mut self, error_description: ::models::ErrorDescription) -> ErrorInformation {
    self.error_description = error_description;
    self
  }

  pub fn error_description(&self) -> &::models::ErrorDescription {
    &self.error_description
  }


  pub fn set_extension_list(&mut self, extension_list: ::models::ExtensionList) {
    self.extension_list = Some(extension_list);
  }

  pub fn with_extension_list(mut self, extension_list: ::models::ExtensionList) -> ErrorInformation {
    self.extension_list = Some(extension_list);
    self
  }

  pub fn extension_list(&self) -> Option<&::models::ExtensionList> {
    self.extension_list.as_ref()
  }

  pub fn reset_extension_list(&mut self) {
    self.extension_list = None;
  }

}



